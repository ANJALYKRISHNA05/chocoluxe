<%- include('../partials/admin/header') %>

<style>
  /* CSS Variables */
  :root {
    --primary-color: #6a3e20;
    --secondary-color: #c49b63;
    --light-color: #f8f5f0;
    --dark-color: #2c1810;
    --success-color: #28a745;
    --danger-color: #dc3545;
    --info-color: #17a2b8;
    --warning-color: #f0ad4e;
    --warning-text: #d58512;
  }

  /* Base Layout */
  .admin-layout {
    display: flex;
    min-height: 100vh;
    background-color: #f9f9f9;
  }

  .main-content {
    flex: 1;
    margin-left: 250px;
    padding: 1.5rem;
    width: calc(100vw - 250px);
    min-width: 0;
    box-sizing: border-box;
  }

  /* Page Header */
  .page-header {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    border-bottom: 2px solid var(--secondary-color);
  }

  .page-title {
    font-family: 'Playfair Display', serif;
    color: var(--primary-color);
    margin: 0;
    font-weight: 600;
    font-size: 1.75rem;
  }

  /* Alert Styles */
  .alert {
    border-radius: 8px;
    margin-bottom: 1.5rem;
    padding: 1rem;
  }

  .alert-danger {
    background-color: rgba(220, 53, 69, 0.1);
    border: 1px solid rgba(220, 53, 69, 0.2);
    color: #721c24;
  }

  .alert-success {
    background-color: rgba(40, 167, 69, 0.1);
    border: 1px solid rgba(40, 167, 69, 0.2);
    color: #155724;
  }

  /* Form Container */
  .form-container {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 15px rgba(0,0,0,0.05);
    padding: 2rem;
    margin-bottom: 1.5rem;
  }

  /* Form Elements */
  .form-label {
    font-weight: 600;
    color: var(--dark-color);
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
  }

  .form-control,
  .form-select {
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    padding: 0.75rem;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
  }

  .form-control:focus,
  .form-select:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 0.2rem rgba(196, 155, 99, 0.25);
    outline: none;
  }

  .form-control:invalid,
  .form-select:invalid {
    border-color: #f0ad4e;
  }

  .form-control.is-invalid,
  .form-select.is-invalid {
    border-color: #f0ad4e;
    background-color: rgba(240, 173, 78, 0.08);
  }

  /* Variant Section */
  .variants-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 2rem 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--light-color);
  }

  .variants-title {
    font-family: 'Playfair Display', serif;
    color: var(--primary-color);
    font-weight: 600;
    font-size: 1.5rem;
    margin: 0;
  }

  .variant-section {
    background-color: #f8f9fa;
    border: 2px solid var(--light-color);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    position: relative;
    transition: all 0.3s ease;
  }

  .variant-section:hover {
    border-color: var(--secondary-color);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .variant-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #dee2e6;
  }

  .variant-title {
    font-weight: 600;
    color: var(--primary-color);
    font-size: 1.1rem;
    margin: 0;
  }

  .remove-variant {
    background-color: var(--danger-color);
    border: none;
    color: white;
    border-radius: 6px;
    padding: 0.5rem 1rem;
    font-size: 0.8rem;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .remove-variant:hover:not(:disabled) {
    background-color: #bd2130;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }

  .remove-variant:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
    opacity: 0.6;
  }

  /* Form Grid Layout */
  .variant-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  /* Image Upload Section */
  .image-upload-section {
    grid-column: 1 / -1;
    background-color: white;
    border-radius: 8px;
    padding: 1rem;
    border: 2px dashed var(--light-color);
    transition: all 0.3s ease;
  }

  .image-upload-section:hover {
    border-color: var(--secondary-color);
    background-color: rgba(196, 155, 99, 0.05);
  }

  .image-upload {
    border: 2px dashed var(--secondary-color);
    border-radius: 8px;
    padding: 1rem;
    background-color: rgba(196, 155, 99, 0.05);
    transition: all 0.3s ease;
  }

  .image-upload:hover {
    background-color: rgba(196, 155, 99, 0.1);
  }

  /* Preview Container */
  .preview-container {
    margin-top: 1rem;
    padding: 1rem;
    background-color: white;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
  }

  .preview-images {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 1rem;
    margin-top: 0.5rem;
  }

  .image-item {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .preview-image {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
  }

  .preview-image:hover {
    transform: scale(1.05);
    border-color: var(--secondary-color);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  }

  .delete-image-btn {
    position: absolute;
    top: -8px;
    right: -8px;
    background-color: var(--danger-color);
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    font-size: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  .delete-image-btn:hover {
    background-color: #bd2130;
    transform: scale(1.1);
  }

  .crop-image-btn {
    position: absolute;
    top: -8px;
    left: -8px;
    background-color: var(--secondary-color);
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    font-size: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  .crop-image-btn:hover {
    background-color: var(--primary-color);
    transform: scale(1.1);
  }

  /* Buttons */
  .btn {
    border-radius: 6px;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .btn-primary {
    background-color: var(--secondary-color);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  }

  .btn-success {
    background-color: var(--success-color);
    color: white;
  }

  .btn-success:hover {
    background-color: #218838;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  }

  .btn-secondary {
    background-color: #6c757d;
    color: white;
  }

  .btn-secondary:hover {
    background-color: #5a6268;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
    flex-wrap: wrap;
  }

  /* Validation Styles */
  .invalid-feedback {
    display: block;
    color: #d58512;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    font-weight: 500;
  }

  /* Loading Spinner */
  .loading-spinner {
    display: none;
    width: 20px;
    height: 20px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Cropper Modal Styles */
  .modal-content {
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    border: none;
  }

  .modal-header {
    background-color: var(--light-color);
    border-bottom: 2px solid var(--secondary-color);
    border-radius: 12px 12px 0 0;
    padding: 1rem 1.5rem;
  }

  .modal-title {
    color: var(--primary-color);
    font-family: 'Playfair Display', serif;
    font-weight: 600;
    font-size: 1.25rem;
  }

  .modal-body {
    padding: 1.5rem;
  }

  .modal-footer {
    border-top: 1px solid #e9ecef;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: flex-end;
    gap: 0.75rem;
  }

  .img-container {
    max-height: 400px;
    overflow: hidden;
    margin: 0 auto;
    border-radius: 8px;
  }

  #imageToCrop {
    max-width: 100%;
    display: block;
  }

  .cropper-container {
    margin: 0 auto;
  }

  .cropper-view-box,
  .cropper-face {
    border-radius: 8px;
  }

  .cropper-point {
    background-color: var(--secondary-color);
  }

  .cropper-line {
    background-color: var(--secondary-color);
  }

  .cropper-modal {
    background-color: rgba(0, 0, 0, 0.6);
  }

  .crop-controls {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1rem;
    flex-wrap: wrap;
  }

  .crop-control-btn {
    background-color: var(--light-color);
    border: 1px solid #dee2e6;
    color: var(--dark-color);
    border-radius: 4px;
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
  }

  .crop-control-btn:hover {
    background-color: var(--secondary-color);
    color: white;
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .main-content {
      margin-left: 200px;
      width: calc(100vw - 200px);
      padding: 1.25rem;
    }

    .variant-grid {
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }
  }

  @media (max-width: 992px) {
    .main-content {
      margin-left: 180px;
      width: calc(100vw - 180px);
      padding: 1rem;
    }

    .form-container {
      padding: 1.5rem;
    }

    .variant-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 0.75rem;
    }

    .variant-section {
      padding: 1.25rem;
    }
  }

  @media (max-width: 768px) {
    .main-content {
      margin-left: 80px;
      width: calc(100vw - 80px);
      padding: 0.75rem;
    }

    .page-title {
      font-size: 1.5rem;
    }

    .form-container {
      padding: 1rem;
    }

    .variant-grid {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }

    .variant-section {
      padding: 1rem;
    }

    .variant-header {
      flex-direction: column;
      align-items: stretch;
      gap: 0.5rem;
    }

    .variants-header {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .form-actions {
      flex-direction: column;
    }

    .btn {
      width: 100%;
      justify-content: center;
    }

    .preview-images {
      grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    }

    .preview-image {
      width: 80px;
      height: 80px;
    }
  }

  @media (max-width: 576px) {
    .main-content {
      margin-left: 70px;
      width: calc(100vw - 70px);
      padding: 0.5rem;
    }

    .page-header {
      padding: 1rem;
    }

    .page-title {
      font-size: 1.25rem;
    }

    .form-container {
      padding: 0.75rem;
    }

    .variant-section {
      padding: 0.75rem;
    }

    .form-control,
    .form-select {
      padding: 0.5rem;
      font-size: 0.85rem;
    }

    .btn {
      padding: 0.5rem 1rem;
      font-size: 0.85rem;
    }

    .variants-title {
      font-size: 1.25rem;
    }

    .variant-title {
      font-size: 1rem;
    }

    .preview-images {
      grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
    }

    .preview-image {
      width: 60px;
      height: 60px;
    }
  }

  .valid-feedback {
    display: none;
  }
</style>

<body>
  <div class="admin-layout">
    <%- include('../partials/admin/sidebar', { activePage: 'products' }) %>

    <main class="main-content">
      <!-- Page Header -->
      <div class="page-header">
        <h1 class="page-title"><%= product ? 'Edit Product' : 'Add Product' %></h1>
      </div>

      <!-- Success Messages -->
      <% if (success) { %>
        <div class="alert alert-success">
          <%= success %>
        </div>
      <% } %>

      <!-- Error Messages -->
      <% if (errors && errors.length > 0) { %>
        <div class="alert alert-danger">
          <ul style="margin: 0; padding-left: 1.5rem;">
            <% errors.forEach(error => { %>
              <li><%= error.msg %></li>
            <% }) %>
          </ul>
        </div>
      <% } %>

      <!-- Product Form -->
      <div class="form-container">
        <form id="productForm" action="<%= product ? '/admin/products/edit/' + product._id : '/admin/products/add' %>" method="POST" enctype="multipart/form-data" novalidate>
          
          <!-- Hidden field for deleted images -->
          <input type="hidden" id="deletedImages" name="deletedImages" value="[]">
          
          <!-- Basic Product Information -->
          <div class="variant-grid">
            <div class="form-group">
              <label for="productName" class="form-label">Product Name *</label>
              <input type="text" class="form-control" id="productName" name="productName" 
                     value="<%= product ? product.productName : '' %>" 
                     required minlength="3" maxlength="100">
              <div class="invalid-feedback">Product name must be between 3-100 characters and unique.</div>
            </div>
            
            <div class="form-group">
              <label for="category" class="form-label">Category *</label>
              <select class="form-select" id="category" name="category" required>
                <option value="">Select Category</option>
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>" <%= product && product.category._id.toString() === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
                <% }) %>
              </select>
              <div class="invalid-feedback">Please select a category.</div>
            </div>
          </div>

          <div class="form-group">
            <label for="description" class="form-label">Description *</label>
            <textarea class="form-control" id="description" name="description" rows="4" 
                      required minlength="10" maxlength="1000"><%= product ? product.description : '' %></textarea>
            <div class="invalid-feedback">Description must be between 10-1000 characters.</div>
          </div>

          <!-- Variants Section -->
          <div class="variants-header">
            <h4 class="variants-title">Product Variants</h4>
            <button type="button" id="addVariant" class="btn btn-success">
              <i class="fas fa-plus"></i>
              Add Variant
            </button>
          </div>

          <div id="variantsContainer">
            <% if (product && product.variants && product.variants.length > 0) { %>
              <% product.variants.forEach((variant, index) => { %>
                <div class="variant-section" data-index="<%= index %>">
                  <div class="variant-header">
                    <h5 class="variant-title">Variant <%= index + 1 %></h5>
                    <button type="button" class="remove-variant" <%= product.variants.length === 1 ? 'disabled' : '' %>>
                      <i class="fas fa-trash"></i>
                      Remove
                    </button>
                  </div>

                  <div class="variant-grid">
                    <div class="form-group">
                      <label class="form-label">Flavor *</label>
                      <select class="form-select" name="variants[<%= index %>][flavor]" required>
                        <option value="">Select Flavor</option>
                        <option value="Almond" <%= variant.flavor === 'Almond' ? 'selected' : '' %>>Almond</option>
                        <option value="Caramel" <%= variant.flavor === 'Caramel' ? 'selected' : '' %>>Caramel</option>
                        <option value="Peanut" <%= variant.flavor === 'Peanut' ? 'selected' : '' %>>Peanut</option>
                      </select>
                      <div class="invalid-feedback">Please select a flavor.</div>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Sugar Level *</label>
                      <select class="form-select" name="variants[<%= index %>][sugarLevel]" required>
                        <option value="">Select Sugar Level</option>
                        <option value="Low" <%= variant.sugarLevel === 'Low' ? 'selected' : '' %>>Low</option>
                        <option value="Medium" <%= variant.sugarLevel === 'Medium' ? 'selected' : '' %>>Medium</option>
                        <option value="Sugar-Free" <%= variant.sugarLevel === 'Sugar-Free' ? 'selected' : '' %>>Sugar-Free</option>
                      </select>
                      <div class="invalid-feedback">Please select a sugar level.</div>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Weight (grams) *</label>
                      <select class="form-select" name="variants[<%= index %>][weight]" required>
                        <option value="">Select Weight</option>
                        <option value="50" <%= variant.weight === 50 ? 'selected' : '' %>>50</option>
                        <option value="100" <%= variant.weight === 100 ? 'selected' : '' %>>100</option>
                        <option value="200" <%= variant.weight === 200 ? 'selected' : '' %>>200</option>
                      </select>
                      <div class="invalid-feedback">Please select a weight.</div>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Stock Quantity *</label>
                      <input type="number" class="form-control" name="variants[<%= index %>][stock_quantity]" 
                             value="<%= variant.stock_quantity %>" min="0" required>
                      <div class="invalid-feedback">Please enter a valid stock quantity.</div>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Regular Price (₹) *</label>
                      <input type="number" class="form-control regular-price" name="variants[<%= index %>][regularPrice]" 
                             value="<%= variant.regularPrice %>" min="0.01" step="0.01" required>
                      <div class="invalid-feedback">Please enter a valid regular price.</div>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Sale Price (₹) *</label>
                      <input type="number" class="form-control sale-price" name="variants[<%= index %>][salePrice]" 
                             value="<%= variant.salePrice %>" min="0.01" step="0.01" required>
                      <div class="invalid-feedback">Please enter a valid sale price.</div>
                    </div>

                    <div class="form-group">
                      <label class="form-label">Offer (%) *</label>
                      <input type="number" class="form-control" name="variants[<%= index %>][productOffer]" 
                             value="<%= variant.productOffer || 0 %>" min="0" max="100" step="1" required>
                      <div class="invalid-feedback">Offer percentage must be between 0-100.</div>
                    </div>

                    <div class="image-upload-section">
                      <label class="form-label">Product Images (Minimum 3 required) *</label>
                      <input type="file" class="form-control image-upload" name="variants[<%= index %>][images]" 
                             accept="image/jpeg,image/jpg,image/png,image/webp" multiple>
                      <small class="text-muted">Accepted formats: JPEG, JPG, PNG, WEBP. Max size: 5MB per image.</small>
                      
                      <div class="preview-container" data-variant-index="<%= index %>">
                        <% if (variant.productImage && variant.productImage.length > 0) { %>
                          <p><strong>Current Images (<span class="image-count"><%= variant.productImage.length %></span>):</strong></p>
                          <div class="preview-images">
                            <% variant.productImage.forEach((image, imgIndex) => { %>
                              <div class="image-item">
                                <img src="<%= image %>" alt="Product Image" class="preview-image" 
                                     data-variant-index="<%= index %>" data-image-index="<%= imgIndex %>">
                                <button type="button" class="delete-image-btn" 
                                        data-variant-index="<%= index %>" 
                                        data-image-url="<%= image %>"
                                        title="Delete Image">
                                  <i class="fas fa-times"></i>
                                </button>
                                <button type="button" class="crop-image-btn" 
                                        data-variant-index="<%= index %>" 
                                        data-image-url="<%= image %>"
                                        data-image-index="<%= imgIndex %>"
                                        title="Crop Image">
                                  <i class="fas fa-crop-alt"></i>
                                </button>
                              </div>
                            <% }) %>
                          </div>
                        <% } else { %>
                          <p><strong>Current Images (<span class="image-count">0</span>):</strong></p>
                          <div class="preview-images"></div>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            <% } else { %>
              <div class="variant-section" data-index="0">
                <div class="variant-header">
                  <h5 class="variant-title">Variant 1</h5>
                  <button type="button" class="remove-variant" disabled>
                    <i class="fas fa-trash"></i>
                    Remove
                  </button>
                </div>

                <div class="variant-grid">
                  <div class="form-group">
                    <label class="form-label">Flavor *</label>
                    <select class="form-select" name="variants[0][flavor]" required>
                      <option value="">Select Flavor</option>
                      <option value="Almond">Almond</option>
                      <option value="Caramel">Caramel</option>
                      <option value="Peanut">Peanut</option>
                    </select>
                    <div class="invalid-feedback">Please select a flavor.</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Sugar Level *</label>
                    <select class="form-select" name="variants[0][sugarLevel]" required>
                      <option value="">Select Sugar Level</option>
                      <option value="Low">Low</option>
                      <option value="Medium">Medium</option>
                      <option value="Sugar-Free">Sugar-Free</option>
                    </select>
                    <div class="invalid-feedback">Please select a sugar level.</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Weight (grams) *</label>
                    <select class="form-select" name="variants[0][weight]" required>
                      <option value="">Select Weight</option>
                      <option value="50">50</option>
                      <option value="100">100</option>
                      <option value="200">200</option>
                    </select>
                    <div class="invalid-feedback">Please select a weight.</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Stock Quantity *</label>
                    <input type="number" class="form-control" name="variants[0][stock_quantity]" 
                           min="0" required>
                    <div class="invalid-feedback">Please enter a valid stock quantity.</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Regular Price (₹) *</label>
                    <input type="number" class="form-control regular-price" name="variants[0][regularPrice]" 
                           min="0.01" step="0.01" required>
                    <div class="invalid-feedback">Please enter a valid regular price.</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Sale Price (₹) *</label>
                    <input type="number" class="form-control sale-price" name="variants[0][salePrice]" 
                           min="0.01" step="0.01" required>
                    <div class="invalid-feedback">Please enter a valid sale price.</div>
                  </div>

                  <div class="form-group">
                    <label class="form-label">Offer (%) *</label>
                    <input type="number" class="form-control" name="variants[0][productOffer]" 
                           value="0" min="0" max="100" step="1" required>
                    <div class="invalid-feedback">Offer percentage must be between 0-100.</div>
                  </div>

                  <div class="image-upload-section">
                    <label class="form-label">Product Images (Minimum 3 required) *</label>
                    <input type="file" class="form-control image-upload" name="variants[0][images]" 
                           accept="image/jpeg,image/jpg,image/png,image/webp" multiple required>
                    <small class="text-muted">Accepted formats: JPEG, JPG, PNG, WEBP. Max size: 5MB per image.</small>
                    <div class="preview-container" data-variant-index="0">
                      <p><strong>Current Images (<span class="image-count">0</span>):</strong></p>
                      <div class="preview-images"></div>
                    </div>
                  </div>
                </div>
              </div>
            <% } %>
          </div>

          <!-- Form Actions -->
          <div class="form-actions">
            <button type="submit" class="btn btn-primary" id="submitBtn">
              <span class="loading-spinner"></span>
              <i class="fas fa-save"></i>
              <%= product ? 'Update Product' : 'Add Product' %>
            </button>
            <a href="/admin/products" class="btn btn-secondary">
              <i class="fas fa-arrow-left"></i>
              Back to Products
            </a>
          </div>
        </form>
      </div>
    </main>
  </div>

  <!-- Image Cropper Modal -->
  <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="img-container">
            <img id="imageToCrop" src="/placeholder.svg" alt="Image to crop">
          </div>
          <div class="crop-controls mt-3">
            <button type="button" class="crop-control-btn" id="rotateLeft" title="Rotate Left">
              <i class="fas fa-undo"></i>
            </button>
            <button type="button" class="crop-control-btn" id="rotateRight" title="Rotate Right">
              <i class="fas fa-redo"></i>
            </button>
            <button type="button" class="crop-control-btn" id="zoomIn" title="Zoom In">
              <i class="fas fa-search-plus"></i>
            </button>
            <button type="button" class="crop-control-btn" id="zoomOut" title="Zoom Out">
              <i class="fas fa-search-minus"></i>
            </button>
            <button type="button" class="crop-control-btn" id="reset" title="Reset">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="cropImage">Crop & Save</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let variantIndex = <%= product && product.variants ? product.variants.length : 1 %>;
      let deletedImages = [];
      let cropper = null;
      let currentFileInput = null;
      let currentVariantIndex = null;
      let currentImageIndex = null;
      let currentImageUrl = null;
      let isExistingImage = false;
      let croppedImages = {};

      // Initialize Bootstrap modal
      const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
      
      // Initialize cropper when modal is shown
      document.getElementById('cropperModal').addEventListener('shown.bs.modal', function () {
        const image = document.getElementById('imageToCrop');
        cropper = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 1,
          dragMode: 'move',
          autoCropArea: 0.8,
          responsive: true,
          guides: true,
          highlight: true,
          cropBoxMovable: true,
          cropBoxResizable: true,
          toggleDragModeOnDblclick: true
        });
      });

      // Destroy cropper when modal is hidden
      document.getElementById('cropperModal').addEventListener('hidden.bs.modal', function () {
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
      });

      // Crop controls
      document.getElementById('rotateLeft').addEventListener('click', () => {
        if (cropper) cropper.rotate(-90);
      });

      document.getElementById('rotateRight').addEventListener('click', () => {
        if (cropper) cropper.rotate(90);
      });

      document.getElementById('zoomIn').addEventListener('click', () => {
        if (cropper) cropper.zoom(0.1);
      });

      document.getElementById('zoomOut').addEventListener('click', () => {
        if (cropper) cropper.zoom(-0.1);
      });

      document.getElementById('reset').addEventListener('click', () => {
        if (cropper) cropper.reset();
      });

      // Crop image handler
      document.getElementById('cropImage').addEventListener('click', () => {
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas({
          width: 500,
          height: 500,
          fillColor: '#fff',
          imageSmoothingEnabled: true,
          imageSmoothingQuality: 'high',
        });

        if (!canvas) {
          Swal.fire({
            title: 'Error',
            text: 'Failed to crop image',
            icon: 'error'
          });
          return;
        }

        canvas.toBlob((blob) => {
          if (!blob) {
            Swal.fire({
              title: 'Error',
              text: 'Failed to create image blob',
              icon: 'error'
            });
            return;
          }

          // Store cropped image data
          if (!croppedImages[currentVariantIndex]) {
            croppedImages[currentVariantIndex] = {};
          }

          if (isExistingImage) {
            // For existing images, we need to handle differently
            const imageUrl = URL.createObjectURL(blob);
            
            // Find the image element and update its source
            const imageElement = document.querySelector(`.preview-image[data-variant-index="${currentVariantIndex}"][data-image-index="${currentImageIndex}"]`);
            if (imageElement) {
              imageElement.src = imageUrl;
              
              // Store the blob for later submission
              croppedImages[currentVariantIndex][currentImageUrl] = {
                blob: blob,
                url: imageUrl
              };
            }
          } else {
            // For newly uploaded images
            if (currentFileInput && currentFileInput.files[currentImageIndex]) {
              // Create a new File object from the blob
              const croppedFile = new File([blob], currentFileInput.files[currentImageIndex].name, {
                type: currentFileInput.files[currentImageIndex].type,
                lastModified: new Date().getTime()
              });
              
              // Store the cropped file
              if (!croppedImages[currentVariantIndex].newFiles) {
                croppedImages[currentVariantIndex].newFiles = {};
              }
              croppedImages[currentVariantIndex].newFiles[currentImageIndex] = croppedFile;
              
              // Update preview image
              const imageElement = document.querySelector(`.preview-image[data-variant-index="${currentVariantIndex}"][data-is-new="true"][data-file-index="${currentImageIndex}"]`);
              if (imageElement) {
                imageElement.src = URL.createObjectURL(blob);
              }
            }
          }

          // Close the modal
          cropperModal.hide();
          
          // Show success message
          Swal.fire({
            title: 'Success',
            text: 'Image cropped successfully',
            icon: 'success',
            timer: 1500,
            showConfirmButton: false
          });
        }, 'image/jpeg', 0.9);
      });

      // Real-time validation
      function validateField(field) {
        const value = field.value.trim();
        const fieldName = field.name;
        let isValid = true;
        let message = '';

        // Product name validation
        if (fieldName === 'productName') {
          if (value.length < 3) {
            isValid = false;
            message = 'Product name must be at least 3 characters long.';
          } else if (value.length > 100) {
            isValid = false;
            message = 'Product name cannot exceed 100 characters.';
          }
        }

        // Description validation
        if (fieldName === 'description') {
          if (value.length < 10) {
            isValid = false;
            message = 'Description must be at least 10 characters long.';
          } else if (value.length > 1000) {
            isValid = false;
            message = 'Description cannot exceed 1000 characters.';
          }
        }

        // Price validation
        if (fieldName.includes('regularPrice')) {
          const numValue = parseFloat(value);
          if (isNaN(numValue) || numValue <= 0) {
            isValid = false;
            message = 'Please enter a valid regular price greater than 0.';
          }
        }

        if (fieldName.includes('salePrice')) {
          const numValue = parseFloat(value);
          if (isNaN(numValue) || numValue <= 0) {
            isValid = false;
            message = 'Please enter a valid sale price greater than 0.';
          }
        }

        // Stock validation
        if (fieldName.includes('stock_quantity')) {
          const numValue = parseInt(value);
          if (isNaN(numValue) || numValue < 0) {
            isValid = false;
            message = 'Please enter a valid stock quantity (0 or greater).';
          }
        }

        // Offer validation
        if (fieldName.includes('productOffer')) {
          const numValue = parseInt(value);
          if (isNaN(numValue) || numValue < 0 || numValue > 100) {
            isValid = false;
            message = 'Offer percentage must be between 0 and 100.';
          }
        }

        // Update field appearance - only show errors, no success styling
        if (isValid) {
          field.classList.remove('is-invalid');
        } else {
          field.classList.add('is-invalid');
          const feedback = field.nextElementSibling;
          if (feedback && feedback.classList.contains('invalid-feedback')) {
            feedback.textContent = message;
          }
        }

        return isValid;
      }

      // Price comparison validation
      function validatePrices(variantSection) {
        const regularPriceInput = variantSection.querySelector('.regular-price');
        const salePriceInput = variantSection.querySelector('.sale-price');
        
        if (regularPriceInput && salePriceInput) {
          const regularPrice = parseFloat(regularPriceInput.value);
          const salePrice = parseFloat(salePriceInput.value);
          
          if (!isNaN(regularPrice) && !isNaN(salePrice) && salePrice > regularPrice) {
            salePriceInput.classList.add('is-invalid');
            const feedback = salePriceInput.nextElementSibling;
            if (feedback && feedback.classList.contains('invalid-feedback')) {
              feedback.textContent = 'Sale price should not be greater than regular price.';
            }
            return false;
          } else if (!isNaN(regularPrice) && !isNaN(salePrice)) {
            salePriceInput.classList.remove('is-invalid');
            return true;
          }
        }
        return true;
      }

      // Image count validation
      function validateImageCount(variantSection) {
        const previewContainer = variantSection.querySelector('.preview-container');
        const imageCount = previewContainer.querySelectorAll('.preview-image').length;
        const countSpan = previewContainer.querySelector('.image-count');
        
        if (countSpan) {
          countSpan.textContent = imageCount;
        }
        
        return imageCount >= 3;
      }

      // Add event listeners for real-time validation
      document.addEventListener('input', (e) => {
        if (e.target.matches('input[type="text"], textarea, input[type="number"]')) {
          validateField(e.target);
          
          // Special handling for price fields
          if (e.target.classList.contains('regular-price') || e.target.classList.contains('sale-price')) {
            const variantSection = e.target.closest('.variant-section');
            validatePrices(variantSection);
          }
        }
      });

      document.addEventListener('change', (e) => {
        if (e.target.matches('select')) {
          validateField(e.target);
        }
      });

      // Image upload preview handler
      document.getElementById('variantsContainer').addEventListener('change', (e) => {
        if (e.target.classList.contains('image-upload')) {
          const files = e.target.files;
          const variantSection = e.target.closest('.variant-section');
          const variantIndex = variantSection.dataset.index;
          const previewContainer = variantSection.querySelector('.preview-container');
          const previewImages = previewContainer.querySelector('.preview-images');
          
          // Validate file types and sizes
          const validFiles = [];
          const maxSize = 5 * 1024 * 1024; // 5MB
          const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
          
          Array.from(files).forEach((file, index) => {
            if (!allowedTypes.includes(file.type)) {
              Swal.fire({
                title: 'Invalid File Type',
                text: `File "${file.name}" is not a valid image format. Please use JPEG, JPG, PNG, or WEBP.`,
                icon: 'error'
              });
              return;
            }
            
            if (file.size > maxSize) {
              Swal.fire({
                title: 'File Too Large',
                text: `File "${file.name}" is too large. Maximum size is 5MB.`,
                icon: 'error'
              });
              return;
            }
            
            validFiles.push(file);
          });
          
          // Create new file list with valid files
          const dt = new DataTransfer();
          validFiles.forEach(file => dt.items.add(file));
          e.target.files = dt.files;
          
          // Add new preview images
          validFiles.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = (event) => {
              const imageItem = document.createElement('div');
              imageItem.className = 'image-item';
              imageItem.innerHTML = `
                <img src="${event.target.result}" alt="New Image" class="preview-image" 
                     data-variant-index="${variantIndex}" data-is-new="true" data-file-index="${index}">
                <button type="button" class="delete-image-btn" 
                        data-variant-index="${variantIndex}" 
                        data-is-new="true"
                        data-file-index="${index}"
                        title="Delete Image">
                  <i class="fas fa-times"></i>
                </button>
                <button type="button" class="crop-image-btn" 
                        data-variant-index="${variantIndex}" 
                        data-is-new="true"
                        data-file-index="${index}"
                        title="Crop Image">
                  <i class="fas fa-crop-alt"></i>
                </button>
              `;
              previewImages.appendChild(imageItem);
              validateImageCount(variantSection);
            };
            reader.readAsDataURL(file);
          });
        }
      });

      // Delete image handler
      document.getElementById('variantsContainer').addEventListener('click', (e) => {
        if (e.target.closest('.delete-image-btn')) {
          const button = e.target.closest('.delete-image-btn');
          const variantIndex = button.dataset.variantIndex;
          const imageUrl = button.dataset.imageUrl;
          const isNew = button.dataset.isNew === 'true';
          const fileIndex = button.dataset.fileIndex;
          const variantSection = button.closest('.variant-section');
          
          Swal.fire({
            title: 'Are you sure?',
            text: 'This image will be deleted.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
            if (result.isConfirmed) {
              if (isNew) {
                // Remove from file input
                const fileInput = variantSection.querySelector('.image-upload');
                const dt = new DataTransfer();
                Array.from(fileInput.files).forEach((file, index) => {
                  if (index != fileIndex) {
                    dt.items.add(file);
                  }
                });
                fileInput.files = dt.files;
                
                // Remove from cropped images if exists
                if (croppedImages[variantIndex] && croppedImages[variantIndex].newFiles && croppedImages[variantIndex].newFiles[fileIndex]) {
                  delete croppedImages[variantIndex].newFiles[fileIndex];
                }
                
                // Remove preview
                button.closest('.image-item').remove();
              } else {
                // Add to deleted images list
                deletedImages.push({
                  variantIndex: parseInt(variantIndex),
                  imageUrl: imageUrl
                });
                
                // Update hidden field
                document.getElementById('deletedImages').value = JSON.stringify(deletedImages);
                
                // Remove from cropped images if exists
                if (croppedImages[variantIndex] && croppedImages[variantIndex][imageUrl]) {
                  delete croppedImages[variantIndex][imageUrl];
                }
                
                // Remove preview
                button.closest('.image-item').remove();
              }
              
              validateImageCount(variantSection);
            }
          });
        }
      });

      // Crop image button handler
      document.getElementById('variantsContainer').addEventListener('click', (e) => {
        if (e.target.closest('.crop-image-btn')) {
          const button = e.target.closest('.crop-image-btn');
          currentVariantIndex = button.dataset.variantIndex;
          currentImageIndex = button.dataset.fileIndex;
          currentImageUrl = button.dataset.imageUrl;
          isExistingImage = !button.dataset.isNew;
          
          const imageToCrop = document.getElementById('imageToCrop');
          
          if (isExistingImage) {
            // For existing images
            imageToCrop.src = currentImageUrl;
            cropperModal.show();
          } else {
            // For newly uploaded images
            const fileInput = button.closest('.variant-section').querySelector('.image-upload');
            currentFileInput = fileInput;
            
            if (fileInput.files[currentImageIndex]) {
              const reader = new FileReader();
              reader.onload = (e) => {
                imageToCrop.src = e.target.result;
                cropperModal.show();
              };
              reader.readAsDataURL(fileInput.files[currentImageIndex]);
            }
          }
        }
      });

      // Form submission handler
      document.getElementById('productForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitBtn = document.getElementById('submitBtn');
        const spinner = submitBtn.querySelector('.loading-spinner');
        
        // Show loading state
        submitBtn.disabled = true;
        spinner.style.display = 'inline-block';
        
        // Validate all fields
        let isFormValid = true;
        let errorMessages = [];
        const variantSections = document.querySelectorAll('.variant-section');

        // Validate basic fields
        const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');
        requiredFields.forEach(field => {
          if (!validateField(field)) {
            isFormValid = false;
            const fieldLabel = field.closest('.form-group')?.querySelector('.form-label')?.textContent || field.name;
            errorMessages.push(`${fieldLabel}: Please check this field`);
          }
        });

        // Validate each variant
        variantSections.forEach((section, index) => {
          // Validate prices
          if (!validatePrices(section)) {
            isFormValid = false;
            errorMessages.push(`Variant ${index + 1}: Sale price cannot be greater than regular price`);
          }
          
          // Validate image count
          if (!validateImageCount(section)) {
            isFormValid = false;
            errorMessages.push(`Variant ${index + 1}: Please upload at least 3 images`);
          }
        });

        if (!isFormValid) {
          submitBtn.disabled = false;
          spinner.style.display = 'none';
          
          // Show specific error messages
          const errorText = errorMessages.length > 0 ? errorMessages.join('\n') : 'Please fix the highlighted errors before submitting.';
          
          Swal.fire({
            title: 'Please Check Your Input',
            text: errorText,
            icon: 'warning',
            confirmButtonText: 'OK'
          });
          return;
        }
        
        // Create FormData for submission
        const formData = new FormData(e.target);
        
        // Add cropped images to form data
        Object.keys(croppedImages).forEach(variantIndex => {
          // Handle existing images that were cropped
          Object.keys(croppedImages[variantIndex]).forEach(key => {
            if (key !== 'newFiles') {
              const croppedImage = croppedImages[variantIndex][key];
              if (croppedImage && croppedImage.blob) {
                // Create a unique name for the cropped image
                const fileName = `cropped_${Date.now()}_${Math.random().toString(36).substring(2, 15)}.jpg`;
                formData.append(`variants[${variantIndex}][croppedImages]`, croppedImage.blob, fileName);
                formData.append(`variants[${variantIndex}][croppedImageUrls]`, key);
              }
            }
          });
          
          // Handle new files that were cropped
          if (croppedImages[variantIndex].newFiles) {
            Object.keys(croppedImages[variantIndex].newFiles).forEach(fileIndex => {
              const croppedFile = croppedImages[variantIndex].newFiles[fileIndex];
              if (croppedFile) {
                // Replace the original file with the cropped one
                formData.append(`variants[${variantIndex}][images]`, croppedFile);
              }
            });
          }
        });
        
        // Submit form
        try {
          const response = await fetch(e.target.action, {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            Swal.fire({
              title: 'Success!',
              text: '<%= product ? "Product updated successfully!" : "Product added successfully!" %>',
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            }).then(() => {
              window.location.href = '/admin/products';
            });
          } else {
            const errorText = await response.text();
            throw new Error(errorText);
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            title: 'Error!',
            text: 'Failed to save product. Please try again.',
            icon: 'error'
          });
        } finally {
          submitBtn.disabled = false;
          spinner.style.display = 'none';
        }
      });

      // Add variant handler
      document.getElementById('addVariant').addEventListener('click', () => {
        const container = document.getElementById('variantsContainer');
        const variantSection = document.createElement('div');
        variantSection.className = 'variant-section';
        variantSection.dataset.index = variantIndex;
        variantSection.innerHTML = `
          <div class="variant-header">
            <h5 class="variant-title">Variant ${variantIndex + 1}</h5>
            <button type="button" class="remove-variant">
              <i class="fas fa-trash"></i>
              Remove
            </button>
          </div>

          <div class="variant-grid">
            <div class="form-group">
              <label class="form-label">Flavor *</label>
              <select class="form-select" name="variants[${variantIndex}][flavor]" required>
                <option value="">Select Flavor</option>
                <option value="Almond">Almond</option>
                <option value="Caramel">Caramel</option>
                <option value="Peanut">Peanut</option>
              </select>
              <div class="invalid-feedback">Please select a flavor.</div>
            </div>

            <div class="form-group">
              <label class="form-label">Sugar Level *</label>
              <select class="form-select" name="variants[${variantIndex}][sugarLevel]" required>
                <option value="">Select Sugar Level</option>
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="Sugar-Free">Sugar-Free</option>
              </select>
              <div class="invalid-feedback">Please select a sugar level.</div>
            </div>

            <div class="form-group">
              <label class="form-label">Weight (grams) *</label>
              <select class="form-select" name="variants[${variantIndex}][weight]" required>
                <option value="">Select Weight</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="200">200</option>
              </select>
              <div class="invalid-feedback">Please select a weight.</div>
            </div>

            <div class="form-group">
              <label class="form-label">Stock Quantity *</label>
              <input type="number" class="form-control" name="variants[${variantIndex}][stock_quantity]" 
                     min="0" required>
              <div class="invalid-feedback">Please enter a valid stock quantity.</div>
            </div>

            <div class="form-group">
              <label class="form-label">Regular Price (₹) *</label>
              <input type="number" class="form-control regular-price" name="variants[${variantIndex}][regularPrice]" 
                     min="0.01" step="0.01" required>
              <div class="invalid-feedback">Please enter a valid regular price.</div>
            </div>

            <div class="form-group">
              <label class="form-label">Sale Price (₹) *</label>
              <input type="number" class="form-control sale-price" name="variants[${variantIndex}][salePrice]" 
                     min="0.01" step="0.01" required>
              <div class="invalid-feedback">Please enter a valid sale price.</div>
            </div>

            <div class="form-group">
              <label class="form-label">Offer (%) *</label>
              <input type="number" class="form-control" name="variants[${variantIndex}][productOffer]" 
                     value="0" min="0" max="100" step="1" required>
              <div class="invalid-feedback">Offer percentage must be between 0-100.</div>
            </div>

            <div class="image-upload-section">
              <label class="form-label">Product Images (Minimum 3 required) *</label>
              <input type="file" class="form-control image-upload" name="variants[${variantIndex}][images]" 
                     accept="image/jpeg,image/jpg,image/png,image/webp" multiple required>
              <small class="text-muted">Accepted formats: JPEG, JPG, PNG, WEBP. Max size: 5MB per image.</small>
              <div class="preview-container" data-variant-index="${variantIndex}">
                <p><strong>Current Images (<span class="image-count">0</span>):</strong></p>
                <div class="preview-images"></div>
              </div>
            </div>
          </div>
        `;
        container.appendChild(variantSection);
        updateRemoveButtons();
        variantIndex++;
      });

      // Remove variant handler
      document.getElementById('variantsContainer').addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-variant') || e.target.closest('.remove-variant')) {
          const button = e.target.classList.contains('remove-variant') ? e.target : e.target.closest('.remove-variant');
          const variantSection = button.closest('.variant-section');
          
          Swal.fire({
            title: 'Are you sure?',
            text: 'This will remove the entire variant and all its data.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, remove it!'
          }).then((result) => {
            if (result.isConfirmed) {
              variantSection.remove();
              updateRemoveButtons();
              reindexVariants();
            }
          });
        }
      });

      function updateRemoveButtons() {
        const variantSections = document.querySelectorAll('.variant-section');
        const removeButtons = document.querySelectorAll('.remove-variant');
        removeButtons.forEach(button => {
          button.disabled = variantSections.length === 1;
        });
      }

      function reindexVariants() {
        const variantSections = document.querySelectorAll('.variant-section');
        
        variantSections.forEach((section, index) => {
          section.dataset.index = index;
          
          // Update variant title
          const title = section.querySelector('.variant-title');
          title.textContent = `Variant ${index + 1}`;
          
          // Update input names
          const inputs = section.querySelectorAll('input, select');
          inputs.forEach(input => {
            const name = input.name.replace(/variants\[\d+\]/, `variants[${index}]`);
            input.name = name;
          });
          
          // Update preview container
          const previewContainer = section.querySelector('.preview-container');
          previewContainer.dataset.variantIndex = index;
          
          // Update preview images
          const previewImages = section.querySelectorAll('.preview-image');
          previewImages.forEach(img => {
            img.dataset.variantIndex = index;
          });
          
          // Update delete buttons
          const deleteButtons = section.querySelectorAll('.delete-image-btn');
          deleteButtons.forEach(btn => {
            btn.dataset.variantIndex = index;
          });

          // Update crop buttons
          const cropButtons = section.querySelectorAll('.crop-image-btn');
          cropButtons.forEach(btn => {
            btn.dataset.variantIndex = index;
          });
        });
        
        variantIndex = variantSections.length;
      }

      // Initialize validation on page load
      const allInputs = document.querySelectorAll('input, select, textarea');
      allInputs.forEach(input => {
        if (input.value) {
          validateField(input);
        }
      });

      // Initialize image counts
      const variantSections = document.querySelectorAll('.variant-section');
      variantSections.forEach(section => {
        validateImageCount(section);
        validatePrices(section);
      });
    });
  </script>

  <%- include('../partials/admin/footer') %>
</body>
</html>
