<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<%- include('../partials/admin/header') %>

<body>
  <div class="content-wrapper">
    <div class="container-fluid">
      <div class="row">
        <%- include('../partials/admin/sidebar', { activePage: 'orders' }) %>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">Order Details - <%= order.orderId %></h1>
            <a href="/admin/orders" class="btn btn-primary">Back to Orders</a>
          </div>

          <% if (order.return.requested && order.return.status === 'approved') { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
              <strong>Return Approved</strong>
              <p>Return Reason: <%= order.return.reason %></p>
              <p>Processed At: <%= new Date(order.return.requestedAt).toLocaleDateString() %></p>
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
          <% } else if (order.return.requested && order.return.status === 'rejected') { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
              <strong>Return Rejected</strong>
              <p>Return Reason: <%= order.return.reason %></p>
              <p>Rejection Reason: <%= order.return.rejectionReason %></p>
              <p>Processed At: <%= new Date(order.return.requestedAt).toLocaleDateString() %></p>
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
          <% } %>

          <div class="card mb-4">
            <div class="card-body">
              <h5 class="card-title">Order Information</h5>
              <p><strong>User:</strong> <%= order.user && order.user.username ? order.user.username : 'Unknown' %></p>
              <p><strong>Order Date:</strong> <%= orderDate %></p>
              <p><strong>Total Amount:</strong> ₹<%= order.total.toFixed(2) %></p>
              <p><strong>Status:</strong> 
                <span class="badge <%= order.status === 'Delivered' ? 'bg-success' : order.status === 'Cancelled' ? 'bg-danger' : order.status === 'Returned' ? 'bg-info' : 'bg-warning' %>">
                  <%= order.status %>
                </span>
              </p>
              <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
              <div class="mt-3">
                <label for="statusSelect" class="form-label"><strong>Update Status:</strong></label>
                <select id="statusSelect" class="form-select w-25 d-inline-block" style="min-width: 150px;">
                  <option value="" disabled selected>Select status</option>
                  <option value="Pending" <%= order.status === 'Pending' ? 'disabled' : '' %>>Pending</option>
                  <option value="Confirmed" <%= order.status === 'Confirmed' ? 'disabled' : '' %>>Confirmed</option>
                  <option value="Shipped" <%= order.status === 'Shipped' ? 'disabled' : '' %>>Shipped</option>
                  <option value="Delivered" <%= order.status === 'Delivered' ? 'disabled' : '' %>>Delivered</option>
                  <option value="Cancelled" <%= order.status === 'Cancelled' ? 'disabled' : '' %>>Cancelled</option>
                </select>
                <button class="btn btn-sm btn-primary ms-2" onclick="updateStatus('<%= order.orderId %>')">Update</button>
              </div>
              <% if (order.return.requested && order.return.status === 'pending') { %>
                <div class="mt-4">
                  <h5 class="card-title">Return Request</h5>
                  <p><strong>Return Reason:</strong> <%= order.return.reason %></p>
                  <p><strong>Requested At:</strong> <%= new Date(order.return.requestedAt).toLocaleDateString() %></p>
                  <button class="btn btn-sm btn-success me-2" onclick="acceptReturn('<%= order.orderId %>')">Accept Return</button>
                  <button class="btn btn-sm btn-danger" onclick="showRejectModal()">Reject Return</button>
                </div>
              <% } %>
            </div>
          </div>

          <div class="card mb-4">
            <div class="card-body">
              <h5 class="card-title">Shipping Address</h5>
              <p><strong>Name:</strong> <%= order.shippingAddress.name %></p>
              <p><strong>Type:</strong> <%= order.shippingAddress.addressType %></p>
              <p><strong>Address:</strong> <%= order.shippingAddress.address %></p>
              <p><strong>City:</strong> <%= order.shippingAddress.city %></p>
              <p><strong>State:</strong> <%= order.shippingAddress.state %></p>
              <p><strong>Pincode:</strong> <%= order.shippingAddress.pincode %></p>
              <p><strong>Phone:</strong> <%= order.shippingAddress.phone %></p>
            </div>
          </div>

          <div class="card">
            <div class="card-body">
              <h5 class="card-title">Order Items</h5>
              <div class="table-responsive">
                <table class="table table-striped table-sm">
                  <thead>
                    <tr>
                      <th scope="col">Product</th>
                      <th scope="col">Variant</th>
                      <th scope="col">Quantity</th>
                      <th scope="col">Price</th>
                      <th scope="col">Subtotal</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% order.items.forEach((item) => { %>
                      <tr>
                        <td><%= item.product ? item.product.productName : 'Unknown' %></td>
                        <td>
                          <% const variant = item.product.variants.find(v => v.sku === item.sku); %>
                          <%= variant ? `${variant.flavor}, ${variant.sugarLevel}, ${variant.weight}g` : 'N/A' %>
                        </td>
                        <td><%= item.quantity %></td>
                        <td>₹<%= item.price.toFixed(2) %></td>
                        <td>₹<%= item.subtotal.toFixed(2) %></td>
                      </tr>
                    <% }) %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <div id="rejectModal" class="modal fade" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Reject Return Request</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <p>Please provide a reason for rejecting the return request:</p>
                  <textarea id="rejectionReason" class="form-control" rows="4" placeholder="Reason for rejection..."></textarea>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                  <button type="button" class="btn btn-danger" onclick="rejectReturn('<%= order.orderId %>')"><i class="fas fa-check me-2"></i>Submit</button>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    async function updateStatus(orderId) {
      console.log('updateStatus called with orderId:', orderId);
      const statusSelect = document.getElementById('statusSelect');
      const newStatus = statusSelect.value;

      if (!newStatus) {
        Swal.fire({
          title: 'Error!',
          text: 'Please select a status.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }

      const result = await Swal.fire({
        title: `Are you sure you want to update the status to ${newStatus}?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, update it!'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch(`/admin/orders/update-status/${orderId}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: newStatus })
          });
          console.log('updateStatus response status:', response.status);
          const data = await response.json();
          console.log('updateStatus response data:', data);
          if (data.success) {
            Swal.fire({
              title: 'Success!',
              text: `Order status updated to ${newStatus}.`,
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            }).then(() => location.reload());
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.message || 'Error updating order status.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        } catch (error) {
          console.error('Error in updateStatus:', error);
          Swal.fire({
            title: 'Error!',
            text: 'Error updating order status.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      }
    }

    async function acceptReturn(orderId) {
      console.log('acceptReturn called with orderId:', orderId);
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to approve this return request?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#28a745',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, approve it!'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch(`/admin/orders/${orderId}/accept-return`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' }
          });
          console.log('acceptReturn response status:', response.status);
          const data = await response.json();
          console.log('acceptReturn response data:', data);
          if (data.success) {
            Swal.fire({
              title: 'Success!',
              text: 'Return request approved successfully.',
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            }).then(() => location.reload());
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.message || 'Error approving return request.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        } catch (error) {
          console.error('Error in acceptReturn:', error);
          Swal.fire({
            title: 'Error!',
            text: 'Error approving return request.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      }
    }

    function showRejectModal() {
      console.log('showRejectModal called');
      const modalElement = document.getElementById('rejectModal');
      const modal = new bootstrap.Modal(modalElement, { backdrop: 'static', keyboard: false });
      modal.show();
    }

    async function rejectReturn(orderId) {
      console.log('rejectReturn called with orderId:', orderId);
      const rejectionReason = document.getElementById('rejectionReason').value.trim();
      console.log('rejectionReason:', rejectionReason);
      if (!rejectionReason) {
        console.log('No rejection reason provided');
        Swal.fire({
          title: 'Error!',
          text: 'Please provide a rejection reason.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }

      const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to reject this return request?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, reject it!'
      });

      if (result.isConfirmed) {
        try {
          console.log('Sending reject-return request');
          const response = await fetch(`/admin/orders/${orderId}/reject-return`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ rejectionReason })
          });
          console.log('rejectReturn response status:', response.status);
          const data = await response.json();
          console.log('rejectReturn response data:', data);
          if (data.success) {
            Swal.fire({
              title: 'Success!',
              text: 'Return request rejected successfully.',
              icon: 'success',
              timer: 2000,
              showConfirmButton: false
            }).then(() => {
              console.log('Reloading page after successful rejection');
              location.reload();
            });
          } else {
            console.log('rejectReturn failed:', data.message);
            Swal.fire({
              title: 'Error!',
              text: data.message || 'Error rejecting return request.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        } catch (error) {
          console.error('Error in rejectReturn:', error);
          Swal.fire({
            title: 'Error!',
            text: 'Error rejecting return request.',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      }
    }
  </script>

  <%- include('../partials/admin/footer') %>
</body>
</html>