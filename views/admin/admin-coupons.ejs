<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupons - Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
     
        .content-wrapper {
            margin-left: 250px;
            padding: 20px;
            margin-top: 60px;
            background-color: #f8f9fa;
            min-height: calc(100vh - 60px);
            transition: margin-left 0.3s ease;
        }

        .table th, .table td {
            vertical-align: middle;
            white-space: nowrap;
        }

        .modal-content {
            border-radius: 10px;
        }

        .btn-sm {
            padding: 5px 10px;
        }

     
        .action-buttons {
            display: flex;
            gap: 5px;
            flex-wrap: nowrap;
        }

     
        .coupon-card {
            display: none;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin-bottom: 15px;
            padding: 15px;
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .coupon-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .coupon-code {
            font-weight: bold;
            font-size: 1.1em;
            color: #007bff;
        }

        .coupon-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
        }

        .detail-label {
            font-size: 0.8em;
            color: #6c757d;
            margin-bottom: 2px;
        }

        .detail-value {
            font-weight: 500;
        }

   
        .is-invalid {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .was-validated .form-control:invalid ~ .invalid-feedback,
        .was-validated .form-select:invalid ~ .invalid-feedback,
        .form-control.is-invalid ~ .invalid-feedback,
        .form-select.is-invalid ~ .invalid-feedback {
            display: block;
        }

     
        @media (max-width: 1200px) {
            .content-wrapper {
                margin-left: 200px;
            }
            
            .table th, .table td {
                font-size: 0.9em;
                padding: 8px;
            }
        }

        @media (max-width: 992px) {
            .content-wrapper {
                margin-left: 0;
                padding: 15px;
                margin-top: 60px;
            }
            
            .table-responsive {
                font-size: 0.85em;
            }
            
            .action-buttons {
                flex-direction: column;
                gap: 3px;
            }
            
            .action-buttons .btn {
                width: 100%;
                justify-content: center;
            }
        }

        @media (max-width: 768px) {
            .content-wrapper {
                padding: 10px;
            }
            
            .table-responsive {
                display: none;
            }
            
            .coupon-card {
                display: block;
            }
            
            .modal-dialog {
                margin: 10px;
                max-width: calc(100% - 20px);
            }
            
            .modal-body {
                padding: 15px;
            }
            
            .btn {
                font-size: 0.9em;
            }
            
            h2 {
                font-size: 1.5em;
                margin-bottom: 20px;
            }
        }

        @media (max-width: 576px) {
            .content-wrapper {
                padding: 8px;
            }
            
            .coupon-details {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: row;
                justify-content: space-around;
            }
            
            .action-buttons .btn {
                flex: 1;
                margin: 0 2px;
                padding: 8px 4px;
                font-size: 0.8em;
            }
            
            .pagination {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .pagination .page-item {
                margin: 2px;
            }
            
            .modal-body .form-control,
            .modal-body .form-select {
                font-size: 16px;
            }
            
            h2 {
                font-size: 1.3em;
                text-align: center;
            }
        }

        @media (max-width: 400px) {
            .content-wrapper {
                padding: 5px;
            }
            
            .coupon-card {
                padding: 10px;
            }
            
            .action-buttons .btn {
                padding: 6px 2px;
                font-size: 0.75em;
            }
            
            .btn-primary {
                width: 100%;
                margin-bottom: 15px;
            }
        }

        @media (max-height: 500px) and (orientation: landscape) {
            .content-wrapper {
                margin-top: 50px;
                padding: 10px;
            }
            
            .modal-dialog {
                max-height: 90vh;
                overflow-y: auto;
            }
        }
    </style>
</head>
<%- include('../partials/admin/header') %>
<body>
    <%- include('../partials/admin/sidebar', { activePage: 'coupons' }) %>

    <div class="content-wrapper">
        <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
            <h2 class="mb-2 mb-md-0">Coupons Management</h2>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                <i class="fas fa-plus"></i> <span class="d-none d-sm-inline">Add New Coupon</span><span class="d-sm-none">Add</span>
            </button>
        </div>

       
        <div class="table-responsive">
            <table class="table table-bordered table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Code</th>
                        <th class="d-none d-lg-table-cell">Description</th>
                        <th>Discount</th>
                        <th class="d-none d-md-table-cell">Min Purchase</th>
                        <th class="d-none d-lg-table-cell">Max Discount</th>
                        <th class="d-none d-md-table-cell">Start Date</th>
                        <th class="d-none d-md-table-cell">End Date</th>
                        <th class="d-none d-lg-table-cell">Usage Limit</th>
                        <th class="d-none d-lg-table-cell">Used Count</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% coupons.forEach(coupon => { %>
                        <tr>
                            <td><strong><%= coupon.code %></strong></td>
                            <td class="d-none d-lg-table-cell"><%= coupon.description %></td>
                            <td>
                                <%= coupon.discountType === 'percentage' ? coupon.discountAmount + '%' : '₹' + coupon.discountAmount %>
                            </td>
                            <td class="d-none d-md-table-cell">₹<%= coupon.minPurchase %></td>
                            <td class="d-none d-lg-table-cell"><%= coupon.maxDiscount ? '₹' + coupon.maxDiscount : '-' %></td>
                            <td class="d-none d-md-table-cell"><%= new Date(coupon.startDate).toLocaleDateString() %></td>
                            <td class="d-none d-md-table-cell"><%= new Date(coupon.endDate).toLocaleDateString() %></td>
                            <td class="d-none d-lg-table-cell"><%= coupon.usageLimit %></td>
                            <td class="d-none d-lg-table-cell"><%= coupon.usedCount %></td>
                            <td>
                                <span class="badge <%= coupon.isActive ? 'bg-success' : 'bg-danger' %>">
                                    <%= coupon.isActive ? 'Active' : 'Inactive' %>
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="/admin/coupons/edit/<%= coupon._id %>" class="btn btn-sm btn-warning" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button class="btn btn-sm btn-info" onclick="toggleStatus('<%= coupon._id %>', <%= coupon.isActive %>)" title="<%= coupon.isActive ? 'Deactivate' : 'Activate' %>">
                                        <i class="fas <%= coupon.isActive ? 'fa-ban' : 'fa-check' %>"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" onclick="deleteCoupon('<%= coupon._id %>')" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>

       
        <div class="mobile-cards">
            <% coupons.forEach(coupon => { %>
                <div class="coupon-card">
                    <div class="coupon-card-header">
                        <div class="coupon-code"><%= coupon.code %></div>
                        <span class="badge <%= coupon.isActive ? 'bg-success' : 'bg-danger' %>">
                            <%= coupon.isActive ? 'Active' : 'Inactive' %>
                        </span>
                    </div>
                    
                    <div class="coupon-details">
                        <div class="detail-item">
                            <span class="detail-label">Description</span>
                            <span class="detail-value"><%= coupon.description %></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Discount</span>
                            <span class="detail-value">
                                <%= coupon.discountType === 'percentage' ? coupon.discountAmount + '%' : '₹' + coupon.discountAmount %>
                            </span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Min Purchase</span>
                            <span class="detail-value">₹<%= coupon.minPurchase %></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Max Discount</span>
                            <span class="detail-value"><%= coupon.maxDiscount ? '₹' + coupon.maxDiscount : '-' %></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Start Date</span>
                            <span class="detail-value"><%= new Date(coupon.startDate).toLocaleDateString() %></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">End Date</span>
                            <span class="detail-value"><%= new Date(coupon.endDate).toLocaleDateString() %></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Usage Limit</span>
                            <span class="detail-value"><%= coupon.usageLimit %></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Used Count</span>
                            <span class="detail-value"><%= coupon.usedCount %></span>
                        </div>
                    </div>
                    
                    <div class="action-buttons">
                        <a href="/admin/coupons/edit/<%= coupon._id %>" class="btn btn-sm btn-warning">
                            <i class="fas fa-edit"></i> Edit
                        </a>
                        <button class="btn btn-sm btn-info" onclick="toggleStatus('<%= coupon._id %>', <%= coupon.isActive %>)">
                            <i class="fas <%= coupon.isActive ? 'fa-ban' : 'fa-check' %>"></i> 
                            <%= coupon.isActive ? 'Deactivate' : 'Activate' %>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteCoupon('<%= coupon._id %>')">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            <% }) %>
        </div>

       
        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center flex-wrap">
                <% if (pagination.hasPrevPage) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= pagination.page - 1 %>&limit=<%= pagination.limit %>">
                            <span class="d-none d-sm-inline">Previous</span>
                            <span class="d-sm-none">Prev</span>
                        </a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                    <li class="page-item <%= pagination.page === i ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>&limit=<%= pagination.limit %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (pagination.hasNextPage) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= pagination.page + 1 %>&limit=<%= pagination.limit %>">
                            <span class="d-none d-sm-inline">Next</span>
                            <span class="d-sm-none">Next</span>
                        </a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>


    <div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addCouponForm" novalidate>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="code" class="form-label">Coupon Code*</label>
                                <input type="text" class="form-control" id="code" name="code" required>
                                <div class="invalid-feedback" id="code-error">Please enter a valid coupon code (letters and numbers only, no spaces).</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="discountType" class="form-label">Discount Type*</label>
                                <select class="form-select" id="discountType" name="discountType" required>
                                    <option value="">Select discount type</option>
                                    <option value="percentage">Percentage</option>
                                    <option value="fixed">Fixed Amount</option>
                                </select>
                                <div class="invalid-feedback" id="discountType-error">Please select a discount type.</div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Description*</label>
                            <textarea class="form-control" id="description" name="description" rows="2" required></textarea>
                            <div class="invalid-feedback" id="description-error">Please enter a description.</div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="discountAmount" class="form-label">Discount Amount / Percentage*</label>
                                <input type="number" class="form-control" id="discountAmount" name="discountAmount" required min="0" step="0.01">
                                <div class="invalid-feedback" id="discountAmount-error">Please enter a valid discount amount.</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="minPurchase" class="form-label">Minimum Purchase*</label>
                                <input type="number" class="form-control" id="minPurchase" name="minPurchase" min="0" step="0.01" required>
                                <div class="invalid-feedback" id="minPurchase-error">Please enter a valid minimum purchase amount.</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="maxDiscount" class="form-label">Max Discount (Optional)</label>
                                <input type="number" class="form-control" id="maxDiscount" name="maxDiscount" min="0" step="0.01">
                                <div class="invalid-feedback" id="maxDiscount-error">Please enter a valid maximum discount amount.</div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="startDate" class="form-label">Start Date*</label>
                                <input type="date" class="form-control" id="startDate" name="startDate" required>
                                <div class="invalid-feedback" id="startDate-error">Please select a valid start date.</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="endDate" class="form-label">End Date*</label>
                                <input type="date" class="form-control" id="endDate" name="endDate" required>
                                <div class="invalid-feedback" id="endDate-error">Please select a valid end date.</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="usageLimit" class="form-label">Usage Limit*</label>
                                <input type="number" class="form-control" id="usageLimit" name="usageLimit" min="1" value="1" required>
                                <div class="invalid-feedback" id="usageLimit-error">Please enter a valid usage limit (minimum 1).</div>
                            </div>
                        </div>
                        
                        <div class="alert alert-danger d-none" id="form-error-message">
                            Please fill in all required fields correctly.
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Add Coupon</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
  
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('startDate').min = today;
            document.getElementById('endDate').min = today;
            
           
            document.getElementById('discountType').addEventListener('change', function() {
                const discountType = this.value;
                const discountAmountInput = document.getElementById('discountAmount');
                
                if (discountType === 'percentage') {
                    discountAmountInput.setAttribute('max', '100');
                    discountAmountInput.setAttribute('step', '1');
                } else {
                    discountAmountInput.removeAttribute('max');
                    discountAmountInput.setAttribute('step', '0.01');
                }
            });
            
       
            document.getElementById('endDate').addEventListener('change', function() {
                const startDate = document.getElementById('startDate').value;
                if (startDate && this.value < startDate) {
                    this.setCustomValidity('End date must be after start date');
                } else {
                    this.setCustomValidity('');
                }
            });
            
          
            document.getElementById('startDate').addEventListener('change', function() {
                const endDateInput = document.getElementById('endDate');
                endDateInput.min = this.value;
                
                if (endDateInput.value && endDateInput.value < this.value) {
                    endDateInput.value = '';
                }
            });
        });

     
        function validateForm(formData) {
            let isValid = true;
            const errors = {};
            
        
            const formElements = document.getElementById('addCouponForm').elements;
            for (let i = 0; i < formElements.length; i++) {
                const element = formElements[i];
                if (element.classList) {
                    element.classList.remove('is-invalid');
                }
            }
            
        
            document.getElementById('form-error-message').classList.add('d-none');
            
          
            const code = formData.get('code');
            if (!code || code.trim() === '') {
                document.getElementById('code').classList.add('is-invalid');
                document.getElementById('code-error').textContent = 'Coupon code is required';
                errors.code = 'Coupon code is required';
                isValid = false;
            } else if (!/^[A-Za-z0-9\s]+$/.test(code.trim())) {
                document.getElementById('code').classList.add('is-invalid');
                document.getElementById('code-error').textContent = 'Coupon code must contain only letters, numbers, and spaces';
                errors.code = 'Coupon code must contain only letters, numbers, and spaces';
                isValid = false;
            } else {
                formData.set('code', code.trimStart());
            }
            
            const description = formData.get('description');
            if (!description || description.trim() === '') {
                document.getElementById('description').classList.add('is-invalid');
                document.getElementById('description-error').textContent = 'Description is required';
                errors.description = 'Description is required';
                isValid = false;
            }
            
            const discountType = formData.get('discountType');
            if (!discountType) {
                document.getElementById('discountType').classList.add('is-invalid');
                document.getElementById('discountType-error').textContent = 'Discount type is required';
                errors.discountType = 'Discount type is required';
                isValid = false;
            }
            
            const discountAmount = formData.get('discountAmount');
            if (!discountAmount) {
                document.getElementById('discountAmount').classList.add('is-invalid');
                document.getElementById('discountAmount-error').textContent = 'Discount amount is required';
                errors.discountAmount = 'Discount amount is required';
                isValid = false;
            } else if (isNaN(discountAmount) || Number(discountAmount) <= 0) {
                document.getElementById('discountAmount').classList.add('is-invalid');
                document.getElementById('discountAmount-error').textContent = 'Discount amount must be a positive number';
                errors.discountAmount = 'Discount amount must be a positive number';
                isValid = false;
            } else if (discountType === 'percentage' && (Number(discountAmount) <= 0 || Number(discountAmount) > 100)) {
                document.getElementById('discountAmount').classList.add('is-invalid');
                document.getElementById('discountAmount-error').textContent = 'Percentage discount must be between 1 and 100';
                errors.discountAmount = 'Percentage discount must be between 1 and 100';
                isValid = false;
            }
            
            const minPurchase = formData.get('minPurchase');
            if (!minPurchase) {
                document.getElementById('minPurchase').classList.add('is-invalid');
                document.getElementById('minPurchase-error').textContent = 'Minimum purchase is required';
                errors.minPurchase = 'Minimum purchase is required';
                isValid = false;
            } else if (isNaN(minPurchase) || Number(minPurchase) < 0) {
                document.getElementById('minPurchase').classList.add('is-invalid');
                document.getElementById('minPurchase-error').textContent = 'Minimum purchase must be a non-negative number';
                errors.minPurchase = 'Minimum purchase must be a non-negative number';
                isValid = false;
            }
            
            const maxDiscount = formData.get('maxDiscount');
            if (maxDiscount && (isNaN(maxDiscount) || Number(maxDiscount) <= 0)) {
                document.getElementById('maxDiscount').classList.add('is-invalid');
                document.getElementById('maxDiscount-error').textContent = 'Maximum discount must be a positive number';
                errors.maxDiscount = 'Maximum discount must be a positive number';
                isValid = false;
            }
            
            const startDate = formData.get('startDate');
            if (!startDate) {
                document.getElementById('startDate').classList.add('is-invalid');
                document.getElementById('startDate-error').textContent = 'Start date is required';
                errors.startDate = 'Start date is required';
                isValid = false;
            } else {
                // Create proper date comparison without time component
                const selectedStartDate = new Date(startDate);
                selectedStartDate.setHours(0, 0, 0, 0);
                
                const currentDate = new Date();
                currentDate.setHours(0, 0, 0, 0);
                
                if (selectedStartDate < currentDate) {
                    document.getElementById('startDate').classList.add('is-invalid');
                    document.getElementById('startDate-error').textContent = 'Start date cannot be in the past';
                    errors.startDate = 'Start date cannot be in the past';
                    isValid = false;
                }
            }
            
            const endDate = formData.get('endDate');
            if (!endDate) {
                document.getElementById('endDate').classList.add('is-invalid');
                document.getElementById('endDate-error').textContent = 'End date is required';
                errors.endDate = 'End date is required';
                isValid = false;
            } else if (startDate) {
                const selectedStartDate = new Date(startDate);
                selectedStartDate.setHours(0, 0, 0, 0);
                
                const selectedEndDate = new Date(endDate);
                selectedEndDate.setHours(0, 0, 0, 0);
                
                if (selectedEndDate < selectedStartDate) {
                    document.getElementById('endDate').classList.add('is-invalid');
                    document.getElementById('endDate-error').textContent = 'End date cannot be earlier than start date';
                    errors.endDate = 'End date cannot be earlier than start date';
                    isValid = false;
                }
            }
            
            const usageLimit = formData.get('usageLimit');
            if (!usageLimit) {
                document.getElementById('usageLimit').classList.add('is-invalid');
                document.getElementById('usageLimit-error').textContent = 'Usage limit is required';
                errors.usageLimit = 'Usage limit is required';
                isValid = false;
            } else if (isNaN(usageLimit) || Number(usageLimit) < 1) {
                document.getElementById('usageLimit').classList.add('is-invalid');
                document.getElementById('usageLimit-error').textContent = 'Usage limit must be at least 1';
                errors.usageLimit = 'Usage limit must be at least 1';
                isValid = false;
            }
            
            if (discountType === 'fixed' && discountAmount && minPurchase && Number(discountAmount) > Number(minPurchase)) {
                document.getElementById('discountAmount').classList.add('is-invalid');
                document.getElementById('discountAmount-error').textContent = 'Discount amount cannot be greater than minimum purchase for fixed discounts';
                errors.discountAmount = 'Discount amount cannot be greater than minimum purchase for fixed discounts';
                isValid = false;
            }
            
            if (!isValid) {
                document.getElementById('form-error-message').classList.remove('d-none');
                document.getElementById('form-error-message').textContent = 'Please fill in all required fields correctly.';
            }
            
            return { isValid, errors };
        }

        document.getElementById('addCouponForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            
          
            const { isValid } = validateForm(formData);
            
            if (!isValid) {
                return;
            }
            
            const data = Object.fromEntries(formData);

            try {
                const response = await fetch('/admin/coupons/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                });
                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: result.message,
                    }).then(() => location.reload());
                } else {
              
                    if (result.errors) {
                        Object.keys(result.errors).forEach(field => {
                            const element = document.getElementById(field);
                            const errorElement = document.getElementById(`${field}-error`);
                            if (element && errorElement) {
                                element.classList.add('is-invalid');
                                errorElement.textContent = result.errors[field];
                            }
                        });
                        document.getElementById('form-error-message').classList.remove('d-none');
                        document.getElementById('form-error-message').textContent = result.message || 'Please correct the errors below.';
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message,
                        });
                    }
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to add coupon',
                });
            }
        });

        async function toggleStatus(couponId, isActive) {
            Swal.fire({
                title: `Are you sure you want to ${isActive ? 'deactivate' : 'activate'} this coupon?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/coupons/toggle-status/${couponId}`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                        });
                        const result = await response.json();

                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: result.message,
                            }).then(() => location.reload());
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message,
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to update coupon status',
                        });
                    }
                }
            });
        }

        async function deleteCoupon(couponId) {
            Swal.fire({
                title: 'Are you sure you want to delete this coupon?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No',
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/coupons/delete/${couponId}`, {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' },
                        });

                        const result = await response.json();

                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted',
                                text: result.message,
                            }).then(() => location.reload());
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message,
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to delete coupon',
                        });
                    }
                }
            });
        }

   
        document.querySelectorAll('#addCouponForm input, #addCouponForm select, #addCouponForm textarea').forEach(element => {
            element.addEventListener('input', function() {
                if (this.classList.contains('is-invalid')) {
                    if (this.checkValidity()) {
                        this.classList.remove('is-invalid');
                    }
                }
            });
        });
        
        document.getElementById('discountAmount').addEventListener('input', function() {
            const discountType = document.getElementById('discountType').value;
            const minPurchase = document.getElementById('minPurchase').value;
            
            if (discountType === 'percentage') {
                if (this.value > 100) {
                    this.value = 100;
                }
            } else if (discountType === 'fixed' && minPurchase && Number(this.value) > Number(minPurchase)) {
                this.classList.add('is-invalid');
                document.getElementById('discountAmount-error').textContent = 'Discount amount cannot be greater than minimum purchase for fixed discounts';
            } else {
                this.classList.remove('is-invalid');
            }
        });
        
        document.getElementById('minPurchase').addEventListener('input', function() {
            const discountType = document.getElementById('discountType').value;
            const discountAmount = document.getElementById('discountAmount').value;
            
            if (discountType === 'fixed' && discountAmount && Number(discountAmount) > Number(this.value)) {
                document.getElementById('discountAmount').classList.add('is-invalid');
                document.getElementById('discountAmount-error').textContent = 'Discount amount cannot be greater than minimum purchase for fixed discounts';
            } else {
                document.getElementById('discountAmount').classList.remove('is-invalid');
            }
        });
    </script>
    <%- include('../partials/admin/footer') %>
</body>
</html>