
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - CHOCOLUXE</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    
    body {
      font-family: 'Nunito Sans', sans-serif;
      background-color: #fcf9f7;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }

    .cart-section {
      flex: 1;
      padding: 3rem 0;
    }

   
    .page-title {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 700;
      margin-bottom: 2rem;
      font-size: 2.5rem;
      position: relative;
      padding-bottom: 0.75rem;
    }

    .page-title:after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 80px;
      height: 3px;
      background: linear-gradient(90deg, #8b5a2b, transparent);
    }

   
    .cart-item {
      border: none;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      background: linear-gradient(145deg, #fff, #f8f3ef);
      transition: all 0.4s ease;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
      display: flex;
      align-items: center;
    }

    .cart-item:hover {
      transform: translateY(-5px);
      box-shadow: 0 12px 25px rgba(139, 90, 43, 0.15);
    }

    .cart-item img {
      width: 120px;
      height: 120px;
      object-fit: cover;
      border-radius: 8px;
      transition: transform 0.5s ease;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .cart-item:hover img {
      transform: scale(1.05);
    }

    .cart-item h5 {
      font-family: 'Playfair Display', serif;
      font-weight: 600;
      font-size: 1.25rem;
      color: #33261d;
      margin-bottom: 0.75rem;
    }

    .cart-item p {
      color: #5d534c;
      margin-bottom: 0.5rem;
      font-size: 0.95rem;
    }

    .cart-item .subtotal {
      font-weight: 700;
      color: #8b5a2b;
      font-size: 1.1rem;
      margin-top: 0.5rem;
    }

    .offer-badge {
      font-size: 0.75rem;
      padding: 0.3rem 0.6rem;
      background-color: #c1ceae;
      border-radius: 20px;
      letter-spacing: 0.5px;
      line-height: 1;
    }

    .original-price {
      color: #6c757d;
      font-size: 0.9rem;
      margin-left: 0.5rem;
    }

 
    .quantity-selector {
      width: 120px;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
    }

    .quantity-selector .form-control {
      border: none;
      text-align: center;
      font-weight: 600;
      height: 38px;
      background-color: #fff;
    }

    .quantity-selector .btn {
      background-color: #f0e6dd;
      border: none;
      color: #8b5a2b;
      transition: all 0.3s ease;
    }

    .quantity-selector .btn:hover {
      background-color: #8b5a2b;
      color: #fff;
    }

  
    .remove-item {
      background-color: #fff;
      border: 1px solid #dc3545;
      color: #dc3545;
      border-radius: 8px;
      width: 38px;
      height: 38px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }

    .remove-item:hover {
      background-color: #dc3545;
      color: #fff;
      transform: translateY(-3px);
      box-shadow: 0 5px 10px rgba(220, 53, 69, 0.25);
    }

  
    .cart-summary {
      border: none;
      border-radius: 12px;
      padding: 2rem;
      background: linear-gradient(145deg, #fff, #f8f3ef);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
      position: sticky;
      top: 20px;
    }

    .cart-summary h4 {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 600;
      margin-bottom: 1.25rem;
      font-size: 1.5rem;
    }

    .cart-summary hr {
      background-color: #e9e2dc;
      opacity: 0.5;
      margin: 1rem 0;
    }

    .cart-summary .d-flex {
      font-size: 1.1rem;
      color: #5d534c;
    }

    .cart-summary .fw-bold {
      color: #8b5a2b;
      font-size: 1.5rem;
      font-family: 'Playfair Display', serif;
    }

    .proceed-checkout {
      background-color: #8b5a2b;
      border-color: #8b5a2b;
      font-weight: 600;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      margin-top: 1.5rem;
    }

    .proceed-checkout:hover:not(:disabled) {
      background-color: #6d4621;
      border-color: #6d4621;
      transform: translateY(-3px);
      box-shadow: 0 8px 15px rgba(139, 90, 43, 0.25);
    }

    .proceed-checkout:disabled {
      background-color: #b9a89c;
      border-color: #b9a89c;
      cursor: not-allowed;
    }

    
    .coupon-section {
      margin-bottom: 1.5rem;
    }

    .coupon-input-group {
      position: relative;
    }

    .coupon-input {
      border-radius: 8px;
      border: 1px solid #e9e2dc;
      padding: 0.6rem 1rem;
    }

    .coupon-input:focus {
      border-color: #8b5a2b;
      box-shadow: 0 0 0 0.25rem rgba(139, 90, 43, 0.25);
    }

    .apply-coupon-btn {
      background-color: #8b5a2b;
      border-color: #8b5a2b;
      color: #fff;
      border-radius: 8px;
      padding: 0.6rem 1.5rem;
      transition: all 0.3s ease;
    }

    .apply-coupon-btn:hover {
      background-color: #6d4621;
      border-color: #6d4621;
    }

    .applied-coupon {
      display: flex;
      align-items: center;
      background-color: #c1ceae;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      margin-top: 0.5rem;
    }

    .applied-coupon span {
      color: #33261d;
      font-weight: 600;
    }

    .remove-coupon {
      background: none;
      border: none;
      color: #dc3545;
      font-size: 1rem;
      margin-left: 0.5rem;
      cursor: pointer;
    }

    .remove-coupon:hover {
      color: #b02a37;
    }

    .available-coupons {
      margin-top: 1rem;
    }

    .coupon-card {
      border: 1px solid #e9e2dc;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 0.75rem;
      background: linear-gradient(145deg, #fff, #f8f3ef);
      transition: all 0.3s ease;
    }

    .coupon-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 5px 15px rgba(139, 90, 43, 0.15);
    }

    .coupon-card h6 {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .coupon-card p {
      color: #5d534c;
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }

    .apply-coupon-link {
      color: #8b5a2b;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s ease;
    }

    .apply-coupon-link:hover {
      color: #6d4621;
    }

 
    .empty-cart {
      text-align: center;
      padding: 4rem 0;
      background: linear-gradient(145deg, #fff, #f8f3ef);
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
    }

    .empty-cart-icon {
      position: relative;
      display: inline-block;
    }

    .empty-cart img {
      width: 180px;
      margin-bottom: 1rem;
      opacity: 0.85;
      filter: drop-shadow(0 5px 15px rgba(139, 90, 43, 0.2));
      transition: all 0.5s ease;
    }

    .empty-cart:hover img {
      transform: translateY(-5px);
    }

    .empty-cart-title {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 700;
      margin-bottom: 1rem;
      font-size: 2rem;
      letter-spacing: -0.5px;
    }

    .empty-cart-message {
      color: #5d534c;
      margin-bottom: 2rem;
      font-size: 1.1rem;
      max-width: 500px;
      margin-left: auto;
      margin-right: auto;
    }

    .empty-cart-actions .btn {
      background-color: #8b5a2b;
      border-color: #8b5a2b;
      font-weight: 600;
      padding: 0.75rem 2rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 1.1rem;
    }

    .empty-cart-actions .btn:hover {
      background-color: #6d4621;
      border-color: #6d4621;
      transform: translateY(-3px);
      box-shadow: 0 8px 15px rgba(139, 90, 43, 0.25);
    }

   
    .error-message {
      color: #dc3545;
      font-weight: 600;
      margin-top: 0.75rem;
      background-color: rgba(220, 53, 69, 0.1);
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.9rem;
    }

  
    @media (max-width: 991px) {
      .cart-summary {
        margin-top: 2rem;
        position: static;
      }
    }

    @media (max-width: 768px) {
      .page-title {
        font-size: 2rem;
      }

      .cart-item {
        flex-direction: column;
        align-items: flex-start;
        padding: 1.25rem;
      }

      .cart-item img {
        width: 100px;
        height: 100px;
        margin-bottom: 1rem;
      }

      .cart-item .d-flex {
        margin-top: 1rem;
        align-self: flex-end;
      }

      .quantity-selector {
        width: 110px;
      }
    }

    @media (max-width: 576px) {
      .cart-section {
        padding: 2rem 0;
      }

      .page-title {
        font-size: 1.75rem;
      }

      .cart-item h5 {
        font-size: 1.1rem;
      }

      .cart-summary {
        padding: 1.5rem;
      }

      .empty-cart img {
        width: 150px;
      }

      .offer-badge {
        font-size: 0.65rem;
        padding: 0.25rem 0.5rem;
        border-radius: 15px;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/user/header') %>

  <section class="cart-section py-5">
    <div class="container">
      <h2 class="page-title">Your Shopping Cart</h2>

      <% if (cartItems.length > 0) { %>
        <div class="row">
          <div class="col-lg-8">
            <% cartItems.forEach(item => { %>
              <div class="cart-item" data-item-id="<%= item._id %>">
                <img src="<%= item.productImage %>" alt="<%= item.product ? item.product.productName : 'Product Image' %>" class="me-3">
                <div class="flex-grow-1">
                  <h5><%= item.product ? item.product.productName : 'Product Unavailable' %></h5>
                  <% if (item.variant && !item.errorMessage) { %>
                    <div class="variant-details">
                      <span class="badge bg-light text-dark me-2"><%= item.variant.flavor %></span>
                      <span class="badge bg-light text-dark me-2"><%= item.variant.sugarLevel %> sugar</span>
                      <span class="badge bg-light text-dark"><%= item.variant.weight %>g</span>
                      <% if (item.isOutOfStock) { %>
                        <span class="badge bg-danger ms-2">Out of Stock</span>
                      <% } %>
                    </div>
                    <p class="price-info">
                      <span class="price-label">Price:</span> 
                      <span class="price-value">₹<%= item.offerPrice ? item.offerPrice.toFixed(2) : '0.00' %></span> 
                      <% if (item.effectiveOffer > 0) { %>
                        <span class="original-price text-decoration-line-through">₹<%= item.originalPrice ? item.originalPrice.toFixed(2) : '0.00' %></span>
                        <span class="offer-badge badge bg-success ms-2"><%= item.effectiveOffer %>% OFF</span>
                      <% } %>
                      <span class="quantity-label">× <span class="quantity-display"><%= item.quantity %></span></span>
                    </p>
                    <p class="subtotal">Subtotal: ₹<%= item.subtotal.toFixed(2) %></p>
                  <% } %>
                  <% if (item.errorMessage) { %>
                    <p class="error-message"><i class="fas fa-exclamation-circle me-2"></i><%= item.errorMessage %></p>
                  <% } %>
                </div>
                <div class="d-flex align-items-center">
                  <% if (!item.errorMessage) { %>
                    <div class="input-group quantity-selector me-3">
                      <button type="button" class="btn quantity-minus" data-item-id="<%= item._id %>">
                        <i class="fas fa-minus"></i>
                      </button>
                      <input type="number" class="form-control text-center quantity-input" value="<%= item.quantity %>" min="1" max="5" data-item-id="<%= item._id %>" readonly>
                      <button type="button" class="btn quantity-plus" data-item-id="<%= item._id %>">
                        <i class="fas fa-plus"></i>
                      </button>
                    </div>
                  <% } %>
                  <button type="button" class="remove-item" data-item-id="<%= item._id %>">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            <% }); %>
          
            <% if (availableCoupons && availableCoupons.length > 0) { %>
              <div class="available-coupons">
                <h4>Available Coupons</h4>
                <% availableCoupons.forEach(coupon => { %>
                  <div class="coupon-card">
                    <h6><%= coupon.code %></h6>
                    <p><%= coupon.description %></p>
                    <p>Min Purchase: ₹<%= coupon.minPurchase.toFixed(2) %> | Expires: <%= new Date(coupon.endDate).toLocaleDateString() %></p>
                    <a href="#" class="apply-coupon-link" onclick="applyCouponFromCard('<%= coupon.code %>')">Apply Coupon</a>
                  </div>
                <% }) %>
              </div>
            <% } %>
          </div>
          <div class="col-lg-4">
            <div class="cart-summary">
              <h4><i class="fas fa-shopping-basket me-2"></i>Cart Summary</h4>
              <hr>
              
              <div class="coupon-section">
                <div class="input-group coupon-input-group">
                  <input type="text" class="form-control coupon-input" id="couponCode" placeholder="Enter Coupon Code" <%= appliedCoupon ? 'disabled' : '' %>>
                  <button class="btn apply-coupon-btn" type="button" onclick="applyCoupon()" <%= appliedCoupon ? 'disabled' : '' %>>Apply</button>
                </div>
                <% if (appliedCoupon) { %>
                  <div class="applied-coupon">
                    <span>Applied: <%= appliedCoupon.code %> (<%= appliedCoupon.discountType === 'percentage' ? appliedCoupon.discountAmount + '%' : '₹' + appliedCoupon.discountAmount %> off)</span>
                    <button class="remove-coupon" onclick="removeCoupon()"><i class="fas fa-times"></i></button>
                  </div>
                <% } %>
              </div>
              <div class="summary-item d-flex justify-content-between mb-3">
                <span>Subtotal:</span>
                <span class="subtotal-amount">₹<%= subtotal.toFixed(2) %></span>
              </div>
              <div class="summary-item d-flex justify-content-between mb-3">
                <span>Total Savings:</span>
                <span class="total-savings">₹<%= totalSavings.toFixed(2) %></span>
              </div>
              <div class="summary-item d-flex justify-content-between mb-3">
                <span>Coupon Discount:</span>
                <span class="coupon-discount">₹<%= (discount || 0).toFixed(2) %></span>
              </div>
              <div class="summary-item d-flex justify-content-between mb-3">
                <span>Delivery Charge:</span>
                <span class="delivery-charge"><% if (deliveryCharge === 0) { %>Free<% } else { %>₹<%= deliveryCharge.toFixed(2) %><% } %></span>
              </div>
              <div class="summary-item d-flex justify-content-between mb-3">
                <span>Total Amount:</span>
                <span class="fw-bold cart-total">₹<%= total.toFixed(2) %></span>
              </div>
              <div class="checkout-container mt-4">
                <button type="button" class="btn btn-primary btn-lg w-100 proceed-checkout" onclick="validateCouponAndProceed()" <%= (hasInvalidItems || hasOutOfStockItems) ? 'disabled' : '' %>>
                  <i class="fas fa-credit-card me-2"></i>Proceed to Checkout
                </button>
                <% if (hasInvalidItems) { %>
                  <p class="error-message mt-3"><i class="fas fa-exclamation-circle me-2"></i>Please remove invalid items to proceed</p>
                <% } %>
                <% if (hasOutOfStockItems) { %>
                  <p class="error-message mt-3"><i class="fas fa-exclamation-circle me-2"></i>Please remove out-of-stock items to proceed</p>
                <% } %>
                <div id="coupon-validation-message" class="error-message mt-3" style="display: none;"></div>
              </div>
            </div>
          </div>
        </div>
      <% } else { %>
        <div class="empty-cart">
          <div class="empty-cart-icon mb-4">
            <img src="/images/empty-cart.png" alt="Empty Cart" class="img-fluid">
          </div>
          <h3 class="empty-cart-title">Your Shopping Cart is Empty</h3>
          <p class="empty-cart-message">Explore our premium chocolate collection and treat yourself to something delicious!</p>
          <div class="empty-cart-actions">
            <a href="/products" class="btn btn-primary btn-lg">
              <i class="fas fa-shopping-bag me-2"></i>Browse Products
            </a>
          </div>
        </div>
      <% } %>
    </div>
  </section>

  <%- include('../partials/user/footer') %>

  <script>
    function updateCartBadge(count) {
      const badge = document.querySelector('.cart-badge');
      if (badge) {
        if (count > 0) {
          badge.textContent = count;
          badge.style.display = 'inline-block';
        } else {
          badge.style.display = 'none';
        }
      }
    }

    function fetchCartItemCount() {
      fetch('/cart/item-count', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      .then(response => response.json())
      .then(data => {
        updateCartBadge(data.itemCount || 0);
      })
      .catch(error => console.error('Error fetching cart count:', error));
    }

    function calculateDeliveryCharge(subtotal) {
      if (subtotal >= 1000) {
        return 0; 
      } else if (subtotal >= 750) {
        return 30; 
      } else if (subtotal >= 500) {
        return 40; 
      } else if (subtotal >= 250) {
        return 50; 
      } else {
        return 60; 
      }
    }

    function updateCartSummary(data) {
      const subtotalElement = document.querySelector('.subtotal-amount');
      const totalSavingsElement = document.querySelector('.total-savings');
      const couponDiscountElement = document.querySelector('.coupon-discount');
      const deliveryChargeElement = document.querySelector('.delivery-charge');
      const cartTotalElement = document.querySelector('.cart-total');
      const couponInput = document.querySelector('#couponCode');
      const applyButton = document.querySelector('.apply-coupon-btn');
      const appliedCouponDiv = document.querySelector('.applied-coupon');
      
      if (subtotalElement) subtotalElement.textContent = `₹${data.subtotal.toFixed(2)}`;
      if (totalSavingsElement) totalSavingsElement.textContent = `₹${data.totalSavings.toFixed(2)}`;
      if (couponDiscountElement) couponDiscountElement.textContent = `₹${data.discount.toFixed(2)}`;
      
    
      const discountedSubtotal = data.subtotal - data.discount;
      

      const deliveryCharge = calculateDeliveryCharge(discountedSubtotal);
      if (deliveryChargeElement) {
        if (deliveryCharge === 0) {
          deliveryChargeElement.textContent = 'Free';
        } else {
          deliveryChargeElement.textContent = `₹${deliveryCharge.toFixed(2)}`;
        }
      }
      
      
      const total = discountedSubtotal + deliveryCharge;
      if (cartTotalElement) cartTotalElement.textContent = `₹${total.toFixed(2)}`;
      
     
      updateCartBadge(data.itemCount);
      

      if (data.appliedCoupon) {
        couponInput.disabled = true;
        applyButton.disabled = true;
        
     
        const couponHtml = `
          <span>Applied: ${data.appliedCoupon.code} (${data.appliedCoupon.discountType === 'percentage' ? data.appliedCoupon.discountAmount + '%' : '₹' + data.appliedCoupon.discountAmount} off)</span>
          <button class="remove-coupon" onclick="removeCoupon()"><i class="fas fa-times"></i></button>
        `;
        
        if (appliedCouponDiv) {
         
          appliedCouponDiv.innerHTML = couponHtml;
        } else {
         
          const newCouponDiv = document.createElement('div');
          newCouponDiv.className = 'applied-coupon';
          newCouponDiv.innerHTML = couponHtml;
          document.querySelector('.coupon-section').appendChild(newCouponDiv);
        }
      } else {
        couponInput.disabled = false;
        applyButton.disabled = false;
        if (appliedCouponDiv) {
          appliedCouponDiv.remove();
        }
      }
    }

    async function applyCoupon() {
      const couponCode = document.querySelector('#couponCode').value.trim();
      if (!couponCode) {
        Swal.fire('Error', 'Please enter a coupon code', 'error');
        return;
      }

      try {
        const response = await fetch('/cart/apply-coupon', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ couponCode }),
        });

        const data = await response.json();
        if (data.success) {
          updateCartSummary(data);
          Swal.fire('Success', data.message, 'success');
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      } catch (error) {
        Swal.fire('Error', 'An error occurred while applying the coupon', 'error');
      }
    }

    async function applyCouponFromCard(couponCode) {
      try {
        const response = await fetch('/cart/apply-coupon', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ couponCode }),
        });

        const data = await response.json();
        if (data.success) {
          updateCartSummary(data);
          Swal.fire('Success', data.message, 'success');
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      } catch (error) {
        Swal.fire('Error', 'An error occurred while applying the coupon', 'error');
      }
    }

    async function removeCoupon() {
      try {
        const response = await fetch('/cart/remove-coupon', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
        });

        const data = await response.json();
        if (data.success) {
          updateCartSummary(data);
          Swal.fire('Success', data.message, 'success');
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      } catch (error) {
        Swal.fire('Error', 'An error occurred while removing the coupon', 'error');
      }
    }

    document.querySelectorAll('.quantity-minus, .quantity-plus').forEach(button => {
      button.addEventListener('click', async function() {
        const itemId = this.dataset.itemId;
        const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
        if (!input) {
          console.error(`Quantity input not found for itemId: ${itemId}`);
          return;
        }
        let quantity = parseInt(input.value);

        if (this.classList.contains('quantity-minus') && quantity > 1) {
          quantity--;
        } else if (this.classList.contains('quantity-plus')) {
          if (quantity >= 5) {
            Swal.fire('Limit Reached', 'You cannot add more than 5 units of this item', 'warning');
            return;
          }
          quantity++;
        } else {
          return;
        }

        this.disabled = true;

        try {
          const response = await fetch('/cart/update-quantity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ itemId, quantity }),
          });

          if (response.status === 401 || response.redirected) {
            Swal.fire('Session Expired', 'Please log in to continue', 'warning')
              .then(() => {
                window.location.href = '/user/login';
              });
            return;
          }

          if (!response.ok) {
          
            const errorData = await response.json();
            throw new Error(errorData.message || 'Network response was not ok');
          }

          const data = await response.json();
          if (data.success) {
            input.value = quantity;
            const cartItem = document.querySelector(`.cart-item[data-item-id="${itemId}"]`);
            if (cartItem) {
              cartItem.querySelector('.subtotal').textContent = `Subtotal: ₹${data.itemSubtotal.toFixed(2)}`;
              cartItem.querySelector('.quantity-display').textContent = quantity;
              const priceInfo = cartItem.querySelector('.price-info');
              let offerHtml = '';
              if (data.effectiveOffer > 0) {
                offerHtml = `
                  <span class="original-price text-decoration-line-through">₹${data.originalPrice.toFixed(2)}</span>
                  <span class="offer-badge badge bg-success ms-2">${data.effectiveOffer}% OFF</span>
                `;
              }
              priceInfo.innerHTML = `
                <span class="price-label">Price:</span> 
                <span class="price-value">₹${data.offerPrice.toFixed(2)}</span> 
                ${offerHtml}
                <span class="quantity-label">× <span class="quantity-display">${quantity}</span></span>
              `;
              updateCartSummary(data);
            } else {
              console.error(`Cart item not found for itemId: ${itemId}`);
            }
          } else {
            Swal.fire('Error', data.message, 'error');
          }
        } catch (error) {
          console.error('Error updating quantity:', error);
        
          const errorMessage = error.message || 'An error occurred while updating quantity';
          Swal.fire('Error', errorMessage, 'error');
        } finally {
          this.disabled = false;
        }
      });
    });

    document.querySelectorAll('.remove-item').forEach(button => {
      button.addEventListener('click', function() {
        const itemId = this.dataset.itemId;

        Swal.fire({
          title: 'Are you sure?',
          text: 'Do you want to remove this item from your cart?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, remove it!'
        }).then(async (result) => {
          if (result.isConfirmed) {
            this.disabled = true;

            try {
              const response = await fetch('/cart/remove', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ itemId }),
              });

              if (response.status === 401 || response.redirected) {
                Swal.fire('Session Expired', 'Please log in to continue', 'warning')
                  .then(() => {
                    window.location.href = '/user/login';
                  });
                return;
              }

              if (!response.ok) {
                throw new Error('Network response was not ok');
              }

              const data = await response.json();
              if (data.success) {
                const cartItem = document.querySelector(`.cart-item[data-item-id="${itemId}"]`);
                if (cartItem) {
                  cartItem.remove();
                  updateCartSummary(data);
                  if (data.itemCount === 0) {
                    location.reload();
                  } else {
                    const remainingItems = document.querySelectorAll('.cart-item .error-message');
                    if (remainingItems.length === 0) {
                      document.querySelector('.proceed-checkout').disabled = false;
                      const errorMsg = document.querySelector('.cart-summary .error-message');
                      if (errorMsg) errorMsg.remove();
                    }
                  }
                  Swal.fire('Removed', 'Item removed from cart', 'success');
                } else {
                  console.error(`Cart item not found for itemId: ${itemId}`);
                }
              } else {
                Swal.fire('Error', data.message, 'error');
              }
            } catch (error) {
              console.error('Error removing item:', error);
              Swal.fire('Error', 'An error occurred while removing item', 'error');
            } finally {
              this.disabled = false;
            }
          }
        });
      });
    });

    document.addEventListener('DOMContentLoaded', function() {
      fetchCartItemCount();
    });

   
    async function validateCouponAndProceed() {
   
      const appliedCouponDiv = document.querySelector('.applied-coupon');
      
      if (!appliedCouponDiv) {
        
        window.location.href = '/checkout';
        return;
      }
      
      try {
        
        const proceedButton = document.querySelector('.proceed-checkout');
        const originalButtonText = proceedButton.innerHTML;
        proceedButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Validating...';
        proceedButton.disabled = true;
        
        
        const response = await fetch('/cart/validate-coupon', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
          
          window.location.href = '/checkout';
        } else {
          
          proceedButton.innerHTML = originalButtonText;
          proceedButton.disabled = false;
          
          const messageDiv = document.getElementById('coupon-validation-message');
          messageDiv.innerHTML = `<i class="fas fa-exclamation-circle me-2"></i>${data.message}`;
          messageDiv.style.display = 'block';
          
         
          if (data.couponRemoved) {
            updateCartSummary(data);
            
           
            Swal.fire({
              title: 'Coupon Removed',
              text: data.message,
              icon: 'warning',
              toast: true,
              position: 'top-end',
              showConfirmButton: false,
              timer: 5000,
              timerProgressBar: true
            });
          }
        }
      } catch (error) {
        console.error('Error validating coupon:', error);
        const messageDiv = document.getElementById('coupon-validation-message');
        messageDiv.innerHTML = '<i class="fas fa-exclamation-circle me-2"></i>An error occurred while validating the coupon. Please try again.';
        messageDiv.style.display = 'block';
        
       
        const proceedButton = document.querySelector('.proceed-checkout');
        proceedButton.innerHTML = '<i class="fas fa-credit-card me-2"></i>Proceed to Checkout';
        proceedButton.disabled = false;
      }
    }

  </script>
</body>
</html>
