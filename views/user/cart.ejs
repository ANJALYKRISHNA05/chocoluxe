<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - CHOCOLUXE</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      font-family: 'Nunito Sans', sans-serif;
      background-color: #f5e8d4;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }
    .cart-section {
      flex: 1;
    }
    .cart-item {
      border: 1px solid #dee2e6;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 20px;
      background-color: #fff;
      transition: box-shadow 0.3s;
    }
    .cart-item:hover {
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .cart-item img {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 4px;
    }
    .quantity-selector {
      width: 120px;
    }
    .cart-summary {
      border: 1px solid #dee2e6;
      border-radius: 8px;
      padding: 20px;
      background-color: #fff;
    }
    .empty-cart {
      text-align: center;
      padding: 50px 0;
    }
    .empty-cart img {
      width: 200px;
      margin-bottom: 20px;
    }
    .error-message {
      color: #dc3545;
      font-weight: bold;
      margin-top: 10px;
    }
    @media (max-width: 768px) {
      .cart-item img {
        width: 80px;
        height: 80px;
      }
      .quantity-selector {
        width: 100px;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/user/header') %>

  <section class="cart-section py-5">
    <div class="container">
      <h2 class="mb-4">Your Cart</h2>

      <% if (cartItems.length > 0) { %>
        <div class="row">
          <div class="col-lg-8">
            <% cartItems.forEach(item => { %>
              <div class="cart-item d-flex align-items-center" data-item-id="<%= item._id %>">
                <img src="<%= item.productImage %>" alt="<%= item.product ? item.product.productName : 'Product Image' %>" class="me-3">
                <div class="flex-grow-1">
                  <h5><%= item.product ? item.product.productName : 'Product Unavailable' %></h5>
                  <% if (item.variant && !item.errorMessage) { %>
                    <p class="mb-1">
                      Flavor: <%= item.variant.flavor %> | Sugar: <%= item.variant.sugarLevel %> | Weight: <%= item.variant.weight %>g
                    </p>
                    <p class="mb-1">Price: ₹<%= (item.variant.salePrice ? item.variant.salePrice : 0).toFixed(2) %> x <%= item.quantity %></p>
                    <p class="fw-bold subtotal">Subtotal: ₹<%= item.subtotal.toFixed(2) %></p>
                  <% } %>
                  <% if (item.errorMessage) { %>
                    <p class="error-message"><%= item.errorMessage %></p>
                  <% } %>
                </div>
                <div class="d-flex align-items-center">
                  <% if (!item.errorMessage) { %>
                    <div class="input-group quantity-selector me-3">
                      <button type="button" class="btn btn-outline-secondary quantity-minus" data-item-id="<%= item._id %>">-</button>
                      <input type="number" class="form-control text-center quantity-input" value="<%= item.quantity %>" min="1" max="5" data-item-id="<%= item._id %>" readonly>
                      <button type="button" class="btn btn-outline-secondary quantity-plus" data-item-id="<%= item._id %>">+</button>
                    </div>
                  <% } %>
                  <button type="button" class="btn btn-danger remove-item" data-item-id="<%= item._id %>">
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </div>
            <% }); %>
          </div>
          <div class="col-lg-4">
            <div class="cart-summary">
              <h4>Cart Summary</h4>
              <hr>
              <div class="d-flex justify-content-between mb-2">
                <span>Total</span>
                <span class="fw-bold">₹<%= total.toFixed(2) %></span>
              </div>
              <button type="button" class="btn btn-primary btn-lg w-100 mt-3 proceed-checkout" onclick="location.href='/checkout'" <%= hasInvalidItems ? 'disabled' : '' %>>
                Proceed to Checkout
              </button>
              <% if (hasInvalidItems) { %>
                <p class="error-message mt-2">Please remove invalid items to proceed</p>
              <% } %>
            </div>
          </div>
        </div>
      <% } else { %>
        <div class="empty-cart">
          <img src="/images/empty-cart.png" alt="Empty Cart">
          <h3>Your cart is empty</h3>
          <p>Explore our products and add some delicious items to your cart!</p>
          <a href="/products" class="btn btn-primary">Shop Now</a>
        </div>
      <% } %>
    </div>
  </section>

  <%- include('../partials/user/footer') %>

  <script>
    function updateCartBadge(count) {
      const badge = document.querySelector('.cart-badge');
      if (badge) {
        if (count > 0) {
          badge.textContent = count;
          badge.style.display = 'inline-block';
        } else {
          badge.style.display = 'none';
        }
      }
    }

    function fetchCartItemCount() {
      fetch('/cart/item-count', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      .then(response => response.json())
      .then(data => {
        updateCartBadge(data.itemCount || 0);
      })
      .catch(error => console.error('Error fetching cart count:', error));
    }

    document.querySelectorAll('.quantity-minus, .quantity-plus').forEach(button => {
      button.addEventListener('click', function() {
        const itemId = this.dataset.itemId;
        const input = document.querySelector(`.quantity-input[data-item-id="${itemId}"]`);
        if (!input) {
          console.error(`Quantity input not found for itemId: ${itemId}`);
          return;
        }
        let quantity = parseInt(input.value);

        if (this.classList.contains('quantity-minus') && quantity > 1) {
          quantity--;
        } else if (this.classList.contains('quantity-plus')) {
          if (quantity >= 5) {
            Swal.fire('Limit Reached', 'You cannot add more than 5 units of this item', 'warning');
            return;
          }
          quantity++;
        } else {
          return;
        }

        this.disabled = true;

        fetch('/cart/update-quantity', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ itemId, quantity })
        })
        .then(response => {
          if (response.status === 401 || response.redirected) {
            Swal.fire('Session Expired', 'Please log in to continue', 'warning')
              .then(() => {
                window.location.href = '/user/login';
              });
            return null;
          }
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (!data) return;
          if (data.success) {
            input.value = quantity;
            const cartItem = document.querySelector(`.cart-item[data-item-id="${itemId}"]`);
            if (cartItem) {
              cartItem.querySelector('.subtotal').textContent = `Subtotal: ₹${data.itemSubtotal.toFixed(2)}`;
              document.querySelector('.cart-summary .fw-bold').textContent = `₹${data.cartTotal.toFixed(2)}`;
              updateCartBadge(data.itemCount);
              Swal.fire('Success', 'Quantity updated', 'success');
            } else {
              console.error(`Cart item not found for itemId: ${itemId}`);
            }
          } else {
            Swal.fire('Error', data.message, 'error');
          }
        })
        .catch(error => {
          console.error('Error updating quantity:', error);
          Swal.fire('Error', 'An error occurred while updating quantity', 'error');
        })
        .finally(() => {
          this.disabled = false;
        });
      });
    });

    document.querySelectorAll('.remove-item').forEach(button => {
      button.addEventListener('click', function() {
        const itemId = this.dataset.itemId;

        Swal.fire({
          title: 'Are you sure?',
          text: 'Do you want to remove this item from your cart?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, remove it!'
        }).then(result => {
          if (result.isConfirmed) {
            this.disabled = true;

            fetch('/cart/remove', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ itemId })
            })
            .then(response => {
              if (response.status === 401 || response.redirected) {
                Swal.fire('Session Expired', 'Please log in to continue', 'warning')
                  .then(() => {
                    window.location.href = '/user/login';
                  });
                return null;
              }
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              if (!data) return;
              if (data.success) {
                const cartItem = document.querySelector(`.cart-item[data-item-id="${itemId}"]`);
                if (cartItem) {
                  cartItem.remove();
                  document.querySelector('.cart-summary .fw-bold').textContent = `₹${data.cartTotal.toFixed(2)}`;
                  updateCartBadge(data.itemCount);
                  if (data.itemCount === 0) {
                    location.reload();
                  } else {
                    // Check if there are still invalid items after removal
                    const remainingItems = document.querySelectorAll('.cart-item .error-message');
                    if (remainingItems.length === 0) {
                      document.querySelector('.proceed-checkout').disabled = false;
                      const errorMsg = document.querySelector('.cart-summary .error-message');
                      if (errorMsg) errorMsg.remove();
                    }
                  }
                  Swal.fire('Removed', 'Item removed from cart', 'success');
                } else {
                  console.error(`Cart item not found for itemId: ${itemId}`);
                }
              } else {
                Swal.fire('Error', data.message, 'error');
              }
            })
            .catch(error => {
              console.error('Error removing item:', error);
              Swal.fire('Error', 'An error occurred while removing item', 'error');
            })
            .finally(() => {
              this.disabled = false;
            });
          }
        });
      });
    });

    document.addEventListener('DOMContentLoaded', fetchCartItemCount);
  </script>
</body>
</html>