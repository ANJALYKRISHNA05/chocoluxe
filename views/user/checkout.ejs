<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - CHOCOLUXE</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    /* Global Styles */
    body {
      font-family: 'Nunito Sans', sans-serif;
      background-color: #fcf9f7;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }
    
    .checkout-section {
      flex: 1;
      padding: 3rem 0;
    }
    
    /* Page Title Styling */
    .page-title {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 700;
      margin-bottom: 2rem;
      font-size: 2.5rem;
      position: relative;
      padding-bottom: 0.75rem;
    }
    
    .page-title:after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 80px;
      height: 3px;
      background: linear-gradient(90deg, #8b5a2b, transparent);
    }
    
    /* Card Styling */
    .card {
      border: none;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
      overflow: hidden;
      transition: all 0.3s ease;
    }
    
    .card:hover {
      box-shadow: 0 12px 25px rgba(139, 90, 43, 0.15);
    }
    
    .card-body {
      padding: 2rem;
    }
    
    /* Section Headings */
    h4 {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 600;
      font-size: 1.5rem;
      margin-bottom: 1.25rem;
    }
    
    /* Address Card Styling */
    .address-card {
      border: 1px solid #e9e2dc;
      border-radius: 12px;
      padding: 1.25rem;
      height: 100%;
      background: linear-gradient(145deg, #fff, #f8f3ef);
      transition: all 0.4s ease;
    }
    
    .address-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 20px rgba(139, 90, 43, 0.15);
    }
    
    .address-card .form-check-input {
      width: 1.2rem;
      height: 1.2rem;
      margin-top: 0.3rem;
      border-color: #8b5a2b;
    }
    
    .address-card .form-check-input:checked {
      background-color: #8b5a2b;
      border-color: #8b5a2b;
    }
    
    .address-card h5 {
      font-family: 'Playfair Display', serif;
      font-weight: 600;
      color: #33261d;
      font-size: 1.1rem;
      margin-bottom: 0.75rem;
    }
    
    .address-card p {
      color: #5d534c;
      margin-bottom: 0.5rem;
      font-size: 0.95rem;
    }
    
    .address-card .badge {
      font-weight: 500;
      padding: 0.4rem 0.75rem;
      border-radius: 50px;
    }
    
    .badge.bg-secondary {
      background-color: #8b5a2b !important;
    }
    
    .badge.bg-primary {
      background-color: #33261d !important;
    }
    
    .address-card .btn-outline-dark {
      border-color: #8b5a2b;
      color: #8b5a2b;
      border-radius: 6px;
      padding: 0.3rem 0.75rem;
      font-size: 0.85rem;
      transition: all 0.3s ease;
    }
    
    .address-card .btn-outline-dark:hover {
      background-color: #8b5a2b;
      color: #fff;
      transform: translateY(-2px);
    }
    
    /* Payment Method Styling */
    .form-check {
      margin-bottom: 1rem;
    }
    
    .form-check-input {
      border-color: #8b5a2b;
    }
    
    .form-check-input:checked {
      background-color: #8b5a2b;
      border-color: #8b5a2b;
    }
    
    .form-check-label {
      color: #33261d;
      font-weight: 500;
    }
    
    /* Order Items Styling */
    .cart-item {
      border: none;
      border-radius: 12px;
      padding: 1.25rem;
      margin-bottom: 1.25rem;
      background: linear-gradient(145deg, #fff, #f8f3ef);
      transition: all 0.4s ease;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03);
    }
    
    .cart-item:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(139, 90, 43, 0.1);
    }
    
    .cart-item img {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 8px;
      transition: transform 0.5s ease;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }
    
    .cart-item:hover img {
      transform: scale(1.05);
    }
    
    .cart-item h5 {
      font-family: 'Playfair Display', serif;
      font-weight: 600;
      font-size: 1.1rem;
      color: #33261d;
      margin-bottom: 0.5rem;
    }
    
    .cart-item p {
      color: #5d534c;
      margin-bottom: 0.4rem;
      font-size: 0.9rem;
    }
    
    .cart-item .fw-bold {
      color: #8b5a2b;
      font-size: 1rem;
    }

    .offer-badge {
      font-size: 0.75rem;
      padding: 0.3rem 0.6rem;
      background-color: #c1ceae;
      border-radius: 20px;
      letter-spacing: 0.5px;
      line-height: 1;
    }

    .original-price {
      color: #6c757d;
      font-size: 0.9rem;
      margin-left: 0.5rem;
    }
    
    /* Order Summary Styling */
    .order-summary {
      border: none;
      border-radius: 12px;
      padding: 2rem;
      background: linear-gradient(145deg, #fff, #f8f3ef);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
      position: sticky;
      top: 20px;
    }
    
    .order-summary h4 {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 600;
      margin-bottom: 1.25rem;
      font-size: 1.5rem;
    }
    
    .order-summary hr {
      background-color: #e9e2dc;
      opacity: 0.5;
      margin: 1rem 0;
    }
    
    .order-summary .d-flex {
      font-size: 1rem;
      color: #5d534c;
      margin-bottom: 0.75rem;
    }
    
    .order-summary .fw-bold {
      color: #8b5a2b;
      font-size: 1.25rem;
      font-family: 'Playfair Display', serif;
    }
    
    /* Button Styling */
    .btn-primary, .btn-dark {
      background-color: #8b5a2b;
      border-color: #8b5a2b;
      font-weight: 600;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    
    .btn-primary:hover, .btn-dark:hover {
      background-color: #6d4621;
      border-color: #6d4621;
      transform: translateY(-3px);
      box-shadow: 0 8px 15px rgba(139, 90, 43, 0.25);
    }
    
    .btn-outline-secondary {
      border-color: #8b5a2b;
      color: #8b5a2b;
    }
    
    .btn-outline-secondary:hover {
      background-color: #8b5a2b;
      border-color: #8b5a2b;
      color: #fff;
    }
    
    /* Modal Styling */
    .modal-content {
      border: none;
      border-radius: 12px;
      overflow: hidden;
    }
    
    .modal-header {
      background-color: #8b5a2b;
      color: #fff;
      border-bottom: none;
      padding: 1.25rem 1.5rem;
    }
    
    .modal-title {
      font-family: 'Playfair Display', serif;
      font-weight: 600;
    }
    
    .modal-body {
      padding: 1.5rem;
    }
    
    .modal-footer {
      border-top: none;
      padding: 1.25rem 1.5rem;
    }
    
    .btn-close {
      color: #fff;
      opacity: 0.8;
    }
    
    .form-label {
      color: #33261d;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    
    .form-control, .form-select {
      border-color: #e9e2dc;
      border-radius: 8px;
      padding: 0.6rem 1rem;
    }
    
    .form-control:focus, .form-select:focus {
      border-color: #8b5a2b;
      box-shadow: 0 0 0 0.25rem rgba(139, 90, 43, 0.25);
    }
    
    /* Empty State Styling */
    .text-center.py-5 {
      padding: 3rem 0;
    }
    
    .text-center.py-5 i {
      color: #8b5a2b;
      margin-bottom: 1.5rem;
    }
    
    .text-center.py-5 h5 {
      font-family: 'Playfair Display', serif;
      color: #33261d;
      font-weight: 600;
      margin-bottom: 1rem;
      font-size: 1.5rem;
    }
    
    .text-center.py-5 p {
      color: #5d534c;
      margin-bottom: 1.5rem;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 991px) {
      .order-summary {
        margin-top: 2rem;
        position: static;
      }
    }
    
    @media (max-width: 768px) {
      .page-title {
        font-size: 2rem;
      }
      
      .card-body {
        padding: 1.5rem;
      }
      
      .cart-item {
        flex-direction: column;
        align-items: flex-start;
      }
      
      .cart-item img {
        margin-bottom: 1rem;
      }
    }
    
    @media (max-width: 576px) {
      .checkout-section {
        padding: 2rem 0;
      }
      
      .page-title {
        font-size: 1.75rem;
      }
      
      .card-body {
        padding: 1.25rem;
      }
      
      .order-summary {
        padding: 1.5rem;
      }

      .offer-badge {
        font-size: 0.65rem;
        padding: 0.25rem 0.5rem;
        border-radius: 15px;
      }
    }
  </style>
</head>
<body>
  <%- include('../partials/user/header') %>

  <section class="checkout-section py-5">
    <div class="container">
      <h2 class="page-title mb-4">Checkout</h2>

      <div class="row">
        <div class="col-lg-8">
          <div class="card border-0 shadow-sm mb-4">
            <div class="card-body p-4">
              <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">Shipping Address</h4>
                <button class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#addressModal">
                  <i class="fas fa-plus me-2"></i> Add New Address
                </button>
              </div>

              <% if (addresses.length > 0) { %>
                <form id="checkoutForm" action="/checkout/place-order" method="POST">
                  <div class="row">
                    <% addresses.forEach(address => { %>
                      <div class="col-md-6 mb-3">
                        <div class="address-card">
                          <div class="form-check">
                            <input class="form-check-input" type="radio" name="addressId" 
                                   id="address-<%= address._id %>" 
                                   value="<%= address._id %>"
                                   <%= address.isDefault ? 'checked' : '' %> required>
                            <label class="form-check-label w-100" for="address-<%= address._id %>">
                              <h5 class="mb-1">
                                <%= address.name %>
                                <span class="badge bg-secondary ms-2"><%= address.addressType %></span>
                                <% if (address.isDefault) { %>
                                  <span class="badge bg-primary ms-1">Default</span>
                                <% } %>
                              </h5>
                              <p class="mb-1"><%= address.address %></p>
                              <p class="mb-1"><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                              <p class="mb-2"><i class="fas fa-phone-alt me-2"></i><%= address.phone %></p>
                              <button type="button" class="btn btn-sm btn-outline-dark" 
                                      data-bs-toggle="modal" data-bs-target="#addressModal"
                                      data-address-id="<%= address._id %>"
                                      data-name="<%= address.name %>"
                                      data-address-type="<%= address.addressType %>"
                                      data-address="<%= address.address %>"
                                      data-city="<%= address.city %>"
                                      data-state="<%= address.state %>"
                                      data-pincode="<%= address.pincode %>"
                                      data-phone="<%= address.phone %>"
                                      data-is-default="<%= address.isDefault %>">
                                <i class="fas fa-edit"></i> Edit
                              </button>
                            </label>
                          </div>
                        </div>
                      </div>
                    <% }) %>
                  </div>

                  <h4 class="mt-4 mb-3">Payment Method</h4>
                  <div class="form-check mb-3">
                    <input class="form-check-input" type="radio" name="paymentMethod" 
                           id="payment-cod" value="Cash on Delivery" checked required>
                    <label class="form-check-label" for="payment-cod">
                      Cash on Delivery
                    </label>
                  </div>
                  <div class="form-check mb-3">
                    <input class="form-check-input" type="radio" name="paymentMethod" 
                           id="payment-wallet" value="Wallet" <%= wallet.balance < total ? 'disabled' : '' %> required>
                    <label class="form-check-label" for="payment-wallet">
                      Wallet (Balance: ₹<%= wallet.balance.toFixed(2) %>)
                    </label>
                  </div>
                  <div class="form-check mb-3">
                    <input class="form-check-input" type="radio" name="paymentMethod" 
                           id="payment-razorpay" value="Razorpay" required>
                    <label class="form-check-label" for="payment-razorpay">
                      <img src="https://razorpay.com/assets/razorpay-glyph.svg" alt="Razorpay" style="height: 20px; margin-right: 8px;"> Pay with Razorpay
                    </label>
                  </div>

                  <h4 class="mt-4 mb-3">Order Items</h4>
                  <% cartItems.forEach(item => { %>
                    <div class="cart-item d-flex align-items-center">
                      <img src="<%= item.productImage %>" alt="<%= item.product.productName %>" class="me-3">
                      <div class="flex-grow-1">
                        <h5><%= item.product.productName %></h5>
                        <p class="mb-1">
                          Flavor: <%= item.variant.flavor %> | Sugar: <%= item.variant.sugarLevel %> | Weight: <%= item.variant.weight %>g
                        </p>
                        <p class="mb-1">
                          Price: ₹<%= item.offerPrice.toFixed(2) %> x <%= item.quantity %>
                          <% if (item.effectiveOffer > 0) { %>
                            <span class="original-price text-decoration-line-through">₹<%= item.originalPrice.toFixed(2) %></span>
                            <span class="offer-badge badge bg-success ms-2"><%= item.effectiveOffer %>% OFF</span>
                          <% } %>
                        </p>
                        <p class="fw-bold">Subtotal: ₹<%= item.subtotal.toFixed(2) %></p>
                      </div>
                    </div>
                  <% }) %>
                </form>
              <% } else { %>
                <div class="text-center py-5">
                  <i class="fas fa-map-marker-alt fa-3x text-muted mb-3"></i>
                  <h5>No addresses found</h5>
                  <p class="text-muted">Please add a shipping address to continue</p>
                </div>
              <% } %>
            </div>
          </div>
        </div>

        <div class="col-lg-4">
          <div class="order-summary">
            <h4>Order Summary</h4>
            <hr>
            <div class="d-flex justify-content-between mb-2">
              <span>Subtotal</span>
              <span>₹<%= subtotal.toFixed(2) %></span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Total Savings</span>
              <span>-₹<%= totalSavings.toFixed(2) %></span>
            </div>
            <% if (appliedCoupon) { %>
              <div class="d-flex justify-content-between mb-2">
                <span>Coupon (<%= appliedCoupon.code %>)</span>
                <span>-₹<%= discount.toFixed(2) %></span>
              </div>
            <% } %>
            <div class="d-flex justify-content-between mb-2">
              <span>Shipping</span>
              <span>Free</span>
            </div>
            <hr>
            <div class="d-flex justify-content-between mb-2">
              <span class="fw-bold">Total</span>
              <span class="fw-bold">₹<%= total.toFixed(2) %></span>
            </div>
            <button type="button" class="btn btn-primary btn-lg w-100 mt-3" onclick="placeOrder()">
              Place Order
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addressModalLabel">Add/Edit Address</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="modalAddressForm" method="POST">
            <input type="hidden" name="addressId" id="modalAddressId">
            <div class="row g-3">
              <div class="col-md-6">
                <label for="modalName" class="form-label">Full Name</label>
                <input type="text" class="form-control" id="modalName" name="name" required>
              </div>
              <div class="col-md-6">
                <label for="modalAddressType" class="form-label">Address Type</label>
                <select class="form-select" id="modalAddressType" name="addressType" required>
                  <option value="HOME">HOME</option>
                  <option value="WORK">WORK</option>
                  <option value="OTHER">OTHER</option>
                </select>
              </div>
              <div class="col-12">
                <label for="modalAddress" class="form-label">Address</label>
                <input type="text" class="form-control" id="modalAddress" name="address" 
                       placeholder="Street address, apartment, suite, etc." required>
              </div>
              <div class="col-md-4">
                <label for="modalCity" class="form-label">City</label>
                <input type="text" class="form-control" id="modalCity" name="city" required>
              </div>
              <div class="col-md-4">
                <label for="modalState" class="form-label">State</label>
                <input type="text" class="form-control" id="modalState" name="state" required>
              </div>
              <div class="col-md-4">
                <label for="modalPincode" class="form-label">Pincode</label>
                <input type="text" class="form-control" id="modalPincode" name="pincode" 
                       pattern="[0-9]{6}" maxlength="6" required>
              </div>
              <div class="col-md-6">
                <label for="modalPhone" class="form-label">Phone Number</label>
                <input type="text" class="form-control" id="modalPhone" name="phone" 
                       pattern="[0-9]{10}" maxlength="10" required>
              </div>
              <div class="col-md-6 d-flex align-items-end">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" value="true" id="modalSetDefault" name="isDefault">
                  <label class="form-check-label" for="modalSetDefault">
                    Set as default address
                  </label>
                </div>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-dark" onclick="submitAddressForm()">Save Address</button>
        </div>
      </div>
    </div>
  </div>

  <%- include('../partials/user/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    const addressModal = document.getElementById('addressModal');
    addressModal.addEventListener('show.bs.modal', function (event) {
      const button = event.relatedTarget;
      const addressId = button?.getAttribute('data-address-id');
      const isEdit = !!addressId;

      const modalTitle = addressModal.querySelector('.modal-title');
      const form = document.getElementById('modalAddressForm');
      const saveButton = addressModal.querySelector('.modal-footer .btn-dark');

      modalTitle.textContent = isEdit ? 'Edit Address' : 'Add New Address';
      form.action = isEdit ? '/checkout/address/update' : '/checkout/address/add';
      saveButton.textContent = isEdit ? 'Update Address' : 'Save Address';

      if (isEdit) {
        document.getElementById('modalAddressId').value = addressId;
        document.getElementById('modalName').value = button.getAttribute('data-name');
        document.getElementById('modalAddressType').value = button.getAttribute('data-address-type');
        document.getElementById('modalAddress').value = button.getAttribute('data-address');
        document.getElementById('modalCity').value = button.getAttribute('data-city');
        document.getElementById('modalState').value = button.getAttribute('data-state');
        document.getElementById('modalPincode').value = button.getAttribute('data-pincode');
        document.getElementById('modalPhone').value = button.getAttribute('data-phone');
        document.getElementById('modalSetDefault').checked = button.getAttribute('data-is-default') === 'true';
      } else {
        document.getElementById('modalAddressId').value = '';
        document.getElementById('modalAddressForm').reset();
      }
    });

    function submitAddressForm() {
      const form = document.getElementById('modalAddressForm');
      const name = document.getElementById('modalName').value;
      const address = document.getElementById('modalAddress').value;
      const city = document.getElementById('modalCity').value;
      const state = document.getElementById('modalState').value;
      const pincode = document.getElementById('modalPincode').value;
      const phone = document.getElementById('modalPhone').value;
      const addressId = document.getElementById('modalAddressId').value;

      if (!name || !address || !city || !state || !pincode || !phone) {
        Swal.fire('Error', 'All fields are required.', 'error');
        return;
      }

      if (!/^\d{6}$/.test(pincode)) {
        Swal.fire('Error', 'Pincode must be 6 digits.', 'error');
        return;
      }

      if (!/^\d{10}$/.test(phone)) {
        Swal.fire('Error', 'Phone number must be 10 digits.', 'error');
        return;
      }

      console.log('Submitting form with addressId:', addressId);
      form.submit();
    }

    function placeOrder() {
      const form = document.getElementById('checkoutForm');
      const selectedAddress = document.querySelector('input[name="addressId"]:checked');
      const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

      if (!selectedAddress) {
        Swal.fire('Error', 'Please select a shipping address.', 'error');
        return;
      }

      if (!selectedPaymentMethod) {
        Swal.fire('Error', 'Please select a payment method.', 'error');
        return;
      }
      
      // If Razorpay is selected, handle it differently
      if (selectedPaymentMethod.value === 'Razorpay') {
        initiateRazorpayPayment(selectedAddress.value);
        return;
      }

      Swal.fire({
        title: 'Confirm Order',
        text: `Are you sure you want to place this order with ${selectedPaymentMethod.value}?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Yes, place order'
      }).then((result) => {
        if (result.isConfirmed) {
          form.submit();
        }
      });
    }

    // Razorpay payment handling
    function initiateRazorpayPayment(addressId) {
      // Show loading
      Swal.fire({
        title: 'Processing',
        text: 'Initiating payment...',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      // Create order on server
      fetch('/checkout/create-razorpay-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          addressId: addressId,
          paymentMethod: 'Razorpay'
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.close();
          openRazorpayCheckout(data.order);
        } else {
          Swal.fire('Error', data.message || 'Failed to create order', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'Something went wrong. Please try again.', 'error');
      });
    }

    function openRazorpayCheckout(orderData) {
      const options = {
        key: '<%= process.env.RAZORPAY_KEY_ID %>', // Replace with your actual key ID
        amount: orderData.amount,
        currency: orderData.currency,
        name: 'Choco Luxe',
        description: 'Premium Chocolate Purchase',
        image: '/assets/images/logo.png',
        order_id: orderData.id,
        handler: function (response) {
          // Handle successful payment
          verifyPayment(response, orderData);
        },
        prefill: {
          name: '<%= user.username %>',
          email: '<%= user.email %>',
          contact: '<%= user.phone %>'
        },
        theme: {
          color: '#8b5a2b'
        },
        modal: {
          ondismiss: function() {
            // Handle dismissal
            Swal.fire({
              title: 'Payment Cancelled',
              text: 'You cancelled the payment process. Would you like to try again?',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: 'Try Again',
              cancelButtonText: 'Cancel Order'
            }).then((result) => {
              if (result.isConfirmed) {
                initiateRazorpayPayment(document.querySelector('input[name="addressId"]:checked').value);
              } else {
                window.location.href = '/checkout/payment-cancelled/' + orderData.receipt;
              }
            });
          }
        }
      };
      
      const rzp = new Razorpay(options);
      rzp.open();
      
      rzp.on('payment.failed', function (response) {
        Swal.fire({
          title: 'Payment Failed',
          text: response.error.description,
          icon: 'error',
          confirmButtonText: 'Try Again'
        }).then(() => {
          window.location.href = '/checkout/payment-failed/' + orderData.receipt;
        });
      });
    }

    function verifyPayment(payment, order) {
      fetch('/checkout/verify-payment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          payment: payment,
          order: order
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.href = '/order-confirmation/' + data.orderId;
        } else {
          Swal.fire('Error', data.message || 'Payment verification failed', 'error');
          setTimeout(() => {
            window.location.href = '/checkout/payment-failed/' + order.receipt;
          }, 3000);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'Payment verification failed. Please contact support.', 'error');
      });
    }
  </script>

  <% if (typeof message !== 'undefined' && message) { %>
    <script>
      Swal.fire({
        icon: 'info',
        title: 'Message',
        text: '<%= message %>'
      });
    </script>
  <% } %>
</body>
</html>